<?xml version="1.0" encoding="UTF-8"?>
<process
    name="EntityDocRetrieve"
    targetNamespace="urn:gov:hhs:fha:nhinc:gateway:entitybpel:entitydocretrieve"
    xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:sxt="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Trace" 
    xmlns:sxed="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Editor"
    xmlns:sxat="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Attachment"
    xmlns:sxeh="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/ErrorHandling"
    xmlns:tns="urn:gov:hhs:fha:nhinc:gateway:entitybpel:entitydocretrieve" xmlns:ns0="urn:ihe:iti:xds-b:2007" xmlns:ns1="urn:gov:hhs:fha:nhinc:gateway:aggregator" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:entitycommoninternalorch" xmlns:ns3="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns6="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns7="urn:gov:hhs:fha:nhinc:common:auditlog">
    <import namespace="urn:gov:hhs:fha:nhinc:entitydocretrieve" location="Interfaces/wsdl/EntityDocRetrieve.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" location="Interfaces/wsdl/NhincComponentAggregator.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="urn:gov:hhs:fha:nhinc:entitycomponentinternaldocretrieveorch" location="Interfaces/wsdl/EntityComponentInternalDocRetrieveOrch.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" location="Interfaces/wsdl/NhincComponentInternalAuditRepository.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <partnerLinks>
        <partnerLink name="AggregatorPL" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" partnerLinkType="tns:NhincComponentAggregator" partnerRole="NhincComponentAggregatorPortTypeRole"/>
        <partnerLink name="EntityCompIntDocRetrieveOrchPL" xmlns:tns="urn:gov:hhs:fha:nhinc:entitycomponentinternaldocretrieveorch" partnerLinkType="tns:EntityComponentInternalDocRetrieveOrch" partnerRole="EntityComponentInternalDocRetrieveOrchPortTypeRole"/>
        <partnerLink name="AuditRepositoryPL" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" partnerLinkType="tns:NhincComponentInternalAuditRepository" partnerRole="NhincComponentInternalAuditRepositoryPortTypeRole"/>
        <partnerLink name="EntityDocRetrievePL" xmlns:tns="urn:gov:hhs:fha:nhinc:entitydocretrieve" partnerLinkType="tns:EntityDocRetrieve" myRole="EntityDocRetrievePortTypeRole"/>
    </partnerLinks>
    <variables>
        <variable name="LogDocRetrieveResultOut" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" messageType="tns:LogEventResponseMessage"/>
        <variable name="LogDocRetrieveResultIn" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" messageType="tns:LogDocRetrieveResultRequestMessage"/>
        <variable name="LogDocRetrieveOut" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" messageType="tns:LogEventResponseMessage"/>
        <variable name="LogDocRetrieveIn" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" messageType="tns:LogDocRetrieveRequestMessage"/>
        <variable name="RespondingGateway_CrossGatewayRetrieveOut" xmlns:tns="urn:gov:hhs:fha:nhinc:entitydocretrieve" messageType="tns:RespondingGateway_CrossGatewayRetrieveResponseMessage"/>
        <variable name="RespondingGateway_CrossGatewayRetrieveIn" xmlns:tns="urn:gov:hhs:fha:nhinc:entitydocretrieve" messageType="tns:RespondingGateway_CrossGatewayRetrieveRequestMessage"/>
    </variables>
    <sequence>
        <receive name="ReceiveEntityDocRetrieve" createInstance="yes" partnerLink="EntityDocRetrievePL" operation="RespondingGateway_CrossGatewayRetrieve" xmlns:tns="urn:gov:hhs:fha:nhinc:entitydocretrieve" portType="tns:EntityDocRetrievePortType" variable="RespondingGateway_CrossGatewayRetrieveIn"/>
        <assign name="AssignAuditReposDRReq">
            <sxt:trace>
                <sxt:log level="info" location="onStart">
                    <from>'Begin Adhoc Query - input message is:'</from>
                </sxt:log>
                <sxt:log level="info" location="onStart">
                    <from variable="RespondingGateway_CrossGatewayRetrieveIn"/>
                </sxt:log>
            </sxt:trace>
            <copy>
                <from>$RespondingGateway_CrossGatewayRetrieveIn.RespondingGateway_CrossGatewayRetrieveRequest/ns0:RetrieveDocumentSetRequest</from>
                <to>$LogDocRetrieveIn.LogDocRetrieveRequest/ns7:message/ns0:RetrieveDocumentSetRequest</to>
            </copy>
            <copy>
                <from>$RespondingGateway_CrossGatewayRetrieveIn.RespondingGateway_CrossGatewayRetrieveRequest/ns3:assertion</from>
                <to>$LogDocRetrieveIn.LogDocRetrieveRequest/ns7:message/ns7:assertion</to>
            </copy>
            <copy>
                <from>'Inbound'</from>
                <to>$LogDocRetrieveIn.LogDocRetrieveRequest/ns7:direction</to>
            </copy>
            <copy>
                <from>'Entity'</from>
                <to>$LogDocRetrieveIn.LogDocRetrieveRequest/ns7:interface</to>
            </copy>
        </assign>
        <invoke name="InvokeAuditDRReq" partnerLink="AuditRepositoryPL" operation="LogDocRetrieve" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" portType="tns:NhincComponentInternalAuditRepositoryPortType" inputVariable="LogDocRetrieveIn" outputVariable="LogDocRetrieveOut">
            <sxt:trace>
                <sxt:log level="info" location="onStart">
                    <from>'Invoking Audit Repository Service for Entity Doc Retrieve Request'</from>
                </sxt:log>
            </sxt:trace>
        </invoke>
        <scope name="EntityDocRetrieveScope">
            <variables>
                <variable name="DocCount" type="xsd:integer"/>
                <variable name="StartTransactionDocRetrieveOut" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" messageType="tns:StartTransactionDocRetrieveResponseMessage"/>
                <variable name="StartTransactionDocRetrieveIn" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" messageType="tns:StartTransactionDocRetrieveRequestMessage"/>
            </variables>
            <faultHandlers>
                <catch faultName="sxeh:systemFault" faultVariable="systemFaultVar" faultMessageType="sxeh:faultMessage">
                    <sequence name="SystemFaultSeq">
                        <assign name="AssignErrorFromFault">
                            <sxt:trace>
                                <sxt:log level="info" location="onStart">
                                    <from>'EntityDocRetrieve BPEL - A system fault was encountered processing a doc retrieve message. Fault details follow...'</from>
                                </sxt:log>
                                <sxt:log level="warning" location="onStart">
                                    <from variable="systemFaultVar"/>
                                </sxt:log>
                            </sxt:trace>
                            <copy>
                                <from>'XDSRepositoryError'</from>
                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@errorCode</to>
                            </copy>
                            <copy>
                                <from>'urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Failure'</from>
                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/@status</to>
                            </copy>
                            <copy>
                                <from>'Error'</from>
                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@severity</to>
                            </copy>
                            <copy>
                                <from>'Fault encountered processing internal document retrieve'</from>
                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@codeContext</to>
                            </copy>
                        </assign>
                    </sequence>
                </catch>
            </faultHandlers>
            <sequence name="EntityDocRetrieveSequence">
                <assign name="AssignAggregatorStart">
                    <copy>
                        <from>$RespondingGateway_CrossGatewayRetrieveIn.RespondingGateway_CrossGatewayRetrieveRequest/ns0:RetrieveDocumentSetRequest</from>
                        <to>$StartTransactionDocRetrieveIn.StartTransactionDocRetrieveRequest/ns1:retrieveDocumentSetRequest</to>
                    </copy>
                </assign>
                <invoke name="InvokeAggregatorStart" partnerLink="AggregatorPL" operation="StartTransactionDocRetrieve" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" portType="tns:NhincComponentAggregatorPortType" inputVariable="StartTransactionDocRetrieveIn" outputVariable="StartTransactionDocRetrieveOut">
                    <sxt:trace>
                        <sxt:log level="warning" location="onStart">
                            <from>'EntityDocRetrieve.bpel: Starting Transaction'</from>
                        </sxt:log>
                    </sxt:trace>
                </invoke>
                <assign name="AssignDocCount">
                    <sxt:trace>
                        <sxt:log level="warning" location="onStart">
                            <from>concat('Reply: Document Retrieve - Aggregator.StartTransaction - TransactionId: ', $StartTransactionDocRetrieveOut.StartTransactionDocRetrieveResponse/ns1:transactionId)</from>
                        </sxt:log>
                    </sxt:trace>
                    <copy>
                        <from>count($RespondingGateway_CrossGatewayRetrieveIn.RespondingGateway_CrossGatewayRetrieveRequest/ns0:RetrieveDocumentSetRequest/ns0:DocumentRequest)</from>
                        <to variable="DocCount"/>
                    </copy>
                </assign>
                <forEach name="ForEachDocumentRequest" parallel="no" counterName="DocRequestCounter">
                    <sxt:trace>
                        <sxt:log level="warning" location="onStart">
                            <from>'Loop - For Each Document Request'</from>
                        </sxt:log>
                    </sxt:trace>
                    <startCounterValue>1</startCounterValue>
                    <finalCounterValue>$DocCount</finalCounterValue>
                    <scope name="DocRetrieveScope">
                        <variables>
                            <variable name="SendRetrieveDocumentSetRequestOut" xmlns:tns="urn:gov:hhs:fha:nhinc:entitycomponentinternaldocretrieveorch" messageType="tns:SendRetrieveDocumentSetRequestResponseMessage"/>
                            <variable name="SendRetrieveDocumentSetRequestIn" xmlns:tns="urn:gov:hhs:fha:nhinc:entitycomponentinternaldocretrieveorch" messageType="tns:SendRetrieveDocumentSetRequestMessage"/>
                        </variables>
                        <sequence name="Sequence1">
                            <assign name="AssignInternalDocRetrieve">
                                <copy>
                                    <from>$StartTransactionDocRetrieveOut.StartTransactionDocRetrieveResponse/ns1:transactionId</from>
                                    <to>$SendRetrieveDocumentSetRequestIn.SendRetrieveDocumentSetRequest/ns2:TransactionId</to>
                                </copy>
                                <copy>
                                    <from>$RespondingGateway_CrossGatewayRetrieveIn.RespondingGateway_CrossGatewayRetrieveRequest/ns3:assertion</from>
                                    <to>$SendRetrieveDocumentSetRequestIn.SendRetrieveDocumentSetRequest/ns4:Assertion</to>
                                </copy>
                                <copy>
                                    <from>$RespondingGateway_CrossGatewayRetrieveIn.RespondingGateway_CrossGatewayRetrieveRequest/ns0:RetrieveDocumentSetRequest/ns0:DocumentRequest[$DocRequestCounter]</from>
                                    <to>$SendRetrieveDocumentSetRequestIn.SendRetrieveDocumentSetRequest/ns0:RetrieveDocumentSetRequest/ns0:DocumentRequest</to>
                                </copy>
                            </assign>
                            <invoke name="InvokeInternalDocRetrieveOrch" partnerLink="EntityCompIntDocRetrieveOrchPL" operation="SendRetrieveDocumentSetRequest" xmlns:tns="urn:gov:hhs:fha:nhinc:entitycomponentinternaldocretrieveorch" portType="tns:EntityComponentInternalDocRetrieveOrchPortType" inputVariable="SendRetrieveDocumentSetRequestIn" outputVariable="SendRetrieveDocumentSetRequestOut">
                                <sxt:trace>
                                    <sxt:log level="warning" location="onComplete">
                                        <from>'Status from call to Internal Document Retrieve Orchestration'</from>
                                    </sxt:log>
                                    <sxt:log level="info" location="onComplete">
                                        <from variable="SendRetrieveDocumentSetRequestOut"/>
                                    </sxt:log>
                                    <sxt:log level="warning" location="onStart">
                                        <from>'Calling Internal Document Retrieve:'</from>
                                    </sxt:log>
                                    <sxt:log level="info" location="onStart">
                                        <from variable="SendRetrieveDocumentSetRequestIn"/>
                                    </sxt:log>
                                </sxt:trace>
                            </invoke>
                        </sequence>
                    </scope>
                </forEach>
                <scope name="PollForResultsScope">
                    <variables>
                        <variable name="HasError" type="xsd:boolean"/>
                        <variable name="AggregatorCompleted" type="xsd:boolean"/>
                        <variable name="GetAggResultsDocRetrieveOut" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" messageType="tns:GetAggResultsDocRetrieveResponseMessage"/>
                        <variable name="GetAggResultsDocRetrieveIn" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" messageType="tns:GetAggResultsDocRetrieveRequestMessage"/>
                        <variable name="TimedOut" type="xsd:boolean"/>
                    </variables>
                    <eventHandlers>
                        <onAlarm>
                            <for>'P0Y0M0DT0H0M40.0S'</for>
                            <scope name="TimedOutScope">
                                <variables>
                                    <variable name="TimedOutResultsComplete" type="xsd:boolean"/>
                                    <variable name="GetAggResultsDocRetrieveOutTimedOut" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" messageType="tns:GetAggResultsDocRetrieveResponseMessage"/>
                                    <variable name="GetAggResultsDocRetrieveInTimedOut" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" messageType="tns:GetAggResultsDocRetrieveRequestMessage"/>
                                </variables>
                                <sequence name="TimedOutSeq">
                                    <assign name="AssignTimedOut">
                                        <sxt:trace>
                                            <sxt:log level="warning" location="onStart">
                                                <from>'Doc Retrieve Timed Out'</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <copy>
                                            <from>true()</from>
                                            <to variable="TimedOut"/>
                                        </copy>
                                        <copy>
                                            <from>$StartTransactionDocRetrieveOut.StartTransactionDocRetrieveResponse/ns1:transactionId</from>
                                            <to>$GetAggResultsDocRetrieveInTimedOut.GetAggResultsDocRetrieveRequest/ns1:transactionId</to>
                                        </copy>
                                        <copy>
                                            <from>true()</from>
                                            <to>$GetAggResultsDocRetrieveInTimedOut.GetAggResultsDocRetrieveRequest/ns1:timedOut</to>
                                        </copy>
                                    </assign>
                                    <invoke name="InvokeGetAggResultsTimedOut" partnerLink="AggregatorPL" operation="GetAggResultsDocRetrieve" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" portType="tns:NhincComponentAggregatorPortType" inputVariable="GetAggResultsDocRetrieveInTimedOut" outputVariable="GetAggResultsDocRetrieveOutTimedOut"/>
                                    <assign name="AssignTimedOutResultsComplete">
                                        <copy>
                                            <from>$GetAggResultsDocRetrieveOutTimedOut.GetAggResultsDocRetrieveResponse/ns1:status = 'COMPLETE'</from>
                                            <to variable="TimedOutResultsComplete"/>
                                        </copy>
                                    </assign>
                                    <if name="IfTimedOutResultsComplete">
                                        <condition>$TimedOutResultsComplete</condition>
                                        <assign name="AssignTimedOutResults">
                                            <copy>
                                                <from>$GetAggResultsDocRetrieveOutTimedOut.GetAggResultsDocRetrieveResponse/ns1:retrieveDocumentSetResponse</from>
                                                <to variable="RespondingGateway_CrossGatewayRetrieveOut" part="RespondingGateway_CrossGatewayRetrieveResponse"/>
                                            </copy>
                                        </assign>
                                        <else>
                                            <assign name="AssignTimedOutError">
                                                <copy>
                                                    <from>'XDSRepositoryError'</from>
                                                    <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@errorCode</to>
                                                </copy>
                                                <copy>
                                                    <from>'urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Failure'</from>
                                                    <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/@status</to>
                                                </copy>
                                                <copy>
                                                    <from>'Error'</from>
                                                    <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@severity</to>
                                                </copy>
                                                <copy>
                                                    <from>'Processing internal document retrieve - failure in timeout'</from>
                                                    <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@codeContext</to>
                                                </copy>
                                            </assign>
                                        </else>
                                    </if>
                                </sequence>
                            </scope>
                        </onAlarm>
                    </eventHandlers>
                    <sequence name="PollForResultsSequence">
                        <assign name="AssignInitialAggregatorCompleted">
                            <copy>
                                <from>false()</from>
                                <to variable="AggregatorCompleted"/>
                            </copy>
                            <copy>
                                <from>false()</from>
                                <to variable="HasError"/>
                            </copy>
                            <copy>
                                <from>false()</from>
                                <to variable="TimedOut"/>
                            </copy>
                        </assign>
                        <repeatUntil name="RepeatUntilHaveResultsOrTimedOut">
                            <sxt:trace>
                                <sxt:log level="warning" location="onStart">
                                    <from>'Loop: Repeat until Timed Out or all Results are in...'</from>
                                </sxt:log>
                            </sxt:trace>
                            <sequence name="RepeatUntilCompletedOrTimedOutSequence">
                                <assign name="AssignAggResultsIn">
                                    <copy>
                                        <from>$StartTransactionDocRetrieveOut.StartTransactionDocRetrieveResponse/ns1:transactionId</from>
                                        <to>$GetAggResultsDocRetrieveIn.GetAggResultsDocRetrieveRequest/ns1:transactionId</to>
                                    </copy>
                                    <copy>
                                        <from>false()</from>
                                        <to>$GetAggResultsDocRetrieveIn.GetAggResultsDocRetrieveRequest/ns1:timedOut</to>
                                    </copy>
                                </assign>
                                <invoke name="InvokeGetAggResults" partnerLink="AggregatorPL" operation="GetAggResultsDocRetrieve" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentaggregator" portType="tns:NhincComponentAggregatorPortType" inputVariable="GetAggResultsDocRetrieveIn" outputVariable="GetAggResultsDocRetrieveOut">
                                    <sxt:trace>
                                        <sxt:log level="warning" location="onStart">
                                            <from>'Calling GetAggResultsDocRetrieve'</from>
                                        </sxt:log>
                                        <sxt:log level="info" location="onStart">
                                            <from variable="GetAggResultsDocRetrieveIn"/>
                                        </sxt:log>
                                        <sxt:log level="warning" location="onComplete">
                                            <from>'Results of calling GetAggResultsDocRetrieve'</from>
                                        </sxt:log>
                                        <sxt:log level="info" location="onComplete">
                                            <from variable="GetAggResultsDocRetrieveOut"/>
                                        </sxt:log>
                                    </sxt:trace>
                                </invoke>
                                <assign name="AssignCompleted">
                                    <copy>
                                        <from>$GetAggResultsDocRetrieveOut.GetAggResultsDocRetrieveResponse/ns1:status = 'COMPLETE'</from>
                                        <to variable="AggregatorCompleted"/>
                                    </copy>
                                    <copy>
                                        <from>$GetAggResultsDocRetrieveOut.GetAggResultsDocRetrieveResponse/ns1:status = 'FAIL'</from>
                                        <to variable="HasError"/>
                                    </copy>
                                </assign>
                                <if name="IfResultsComplete">
                                    <condition>$AggregatorCompleted</condition>
                                    <assign name="AssignAggResponse">
                                        <copy>
                                            <from>$GetAggResultsDocRetrieveOut.GetAggResultsDocRetrieveResponse/ns1:retrieveDocumentSetResponse</from>
                                            <to variable="RespondingGateway_CrossGatewayRetrieveOut" part="RespondingGateway_CrossGatewayRetrieveResponse"/>
                                        </copy>
                                    </assign>
                                    <elseif>
                                        <condition>$HasError</condition>
                                        <assign name="AssignError">
                                            <copy>
                                                <from>'XDSRepositoryError'</from>
                                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@errorCode</to>
                                            </copy>
                                            <copy>
                                                <from>'urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Failure'</from>
                                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/@status</to>
                                            </copy>
                                            <copy>
                                                <from>'Error'</from>
                                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@severity</to>
                                            </copy>
                                            <copy>
                                                <from>'Processing internal document retrieve'</from>
                                                <to>$RespondingGateway_CrossGatewayRetrieveOut.RespondingGateway_CrossGatewayRetrieveResponse/ns5:RegistryResponse/ns5:RegistryErrorList/ns5:RegistryError/@codeContext</to>
                                            </copy>
                                        </assign>
                                    </elseif>
                                    <else>
                                        <wait name="WaitForResults">
                                            <for>'P0Y0M0DT0H0M1.0S'</for>
                                        </wait>
                                    </else>
                                </if>
                            </sequence>
                            <condition>$AggregatorCompleted or $TimedOut or $HasError</condition>
                        </repeatUntil>
                    </sequence>
                </scope>
            </sequence>
        </scope>
        <assign name="AssignAuditReposDRResp">
            <copy>
                <from>$RespondingGateway_CrossGatewayRetrieveIn.RespondingGateway_CrossGatewayRetrieveRequest/ns3:assertion</from>
                <to>$LogDocRetrieveResultIn.LogDocRetrieveResultRequest/ns7:message/ns7:assertion</to>
            </copy>
            <copy>
                <from variable="RespondingGateway_CrossGatewayRetrieveOut" part="RespondingGateway_CrossGatewayRetrieveResponse"/>
                <to>$LogDocRetrieveResultIn.LogDocRetrieveResultRequest/ns7:message/ns0:RetrieveDocumentSetResponse</to>
            </copy>
            <copy>
                <from>'Inbound'</from>
                <to>$LogDocRetrieveResultIn.LogDocRetrieveResultRequest/ns7:direction</to>
            </copy>
            <copy>
                <from>'Entity'</from>
                <to>$LogDocRetrieveResultIn.LogDocRetrieveResultRequest/ns7:interface</to>
            </copy>
        </assign>
        <invoke name="InvokeAuditReposDRRes" partnerLink="AuditRepositoryPL" operation="LogDocRetrieveResult" xmlns:tns="urn:gov:hhs:fha:nhinc:nhinccomponentinternalauditrepository" portType="tns:NhincComponentInternalAuditRepositoryPortType" inputVariable="LogDocRetrieveResultIn" outputVariable="LogDocRetrieveResultOut">
            <sxt:trace>
                <sxt:log level="info" location="onStart">
                    <from>'Invoking Audit Repository Service for Entity Doc Retrieve Response'</from>
                </sxt:log>
            </sxt:trace>
        </invoke>
        <reply name="ReplyEntityDocRetrieve" partnerLink="EntityDocRetrievePL" operation="RespondingGateway_CrossGatewayRetrieve" xmlns:tns="urn:gov:hhs:fha:nhinc:entitydocretrieve" portType="tns:EntityDocRetrievePortType" variable="RespondingGateway_CrossGatewayRetrieveOut">
            <sxt:trace>
                <sxt:log level="warning" location="onStart">
                    <from>'Reply from EntityDocRetrieve:'</from>
                </sxt:log>
                <sxt:log level="info" location="onStart">
                    <from variable="RespondingGateway_CrossGatewayRetrieveOut"/>
                </sxt:log>
            </sxt:trace>
        </reply>
    </sequence>
</process>
