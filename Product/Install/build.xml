<?xml version="1.0" encoding="UTF-8"?>
<project name="CONNECT Installer" default="install" basedir=".">
    
    <record name="install.debug.log" append="false" loglevel="debug"/>
    
    <tstamp/>

    <property file="local.install.properties"/>
    <property name="glassfish.install.dir" value="${glassfish.install.dir.root}/${glassfish.install.dir.name}"/>
    <property name="temp.dir" value="${basedir}/.installer.temp"/>
    <property name="glassfish.install.ant.script" value="${glassfish.install.dir}/setup.xml"/>
    <property name="metro.zip.file" value="${basedir}/metro-2.1.1.zip"/>
    <property name="metro.install.ant.script" value="${temp.dir}/metro/metro-on-glassfish.xml"/>
    <property name="sql.scripts.dir" value="${basedir}/../DBScripts/nhincdb"/>
    
    <available file="${glassfish.install.dir}" type="dir" property="glassfish.install.dir.exists"/>

    <target name="determine.os">
        <condition property="is.mac">
            <os family="mac"/>
        </condition>
        <condition property="is.windows">
            <os family="windows"/>
        </condition>
    </target>
    
    <target name="setup.properties" depends="setup.properties.mac, setup.properties.windows"/>
    
    <target name="setup.properties.mac" if="is.mac">
        <property name="glassfish.zip.file" value="${basedir}/glassfish-2.1.1.mac.zip"/>
    </target>
    
    <target name="setup.properties.windows"  if="is.windows">
        <property name="glassfish.zip.file" value="${basedir}/glassfish-2.1.1.windows.zip"/>
    </target>
    
    <target name="backup.glassfish.install.dir" if="glassfish.install.dir.exists">
    	<echo message="WARNING: glassfish appears to already be installed at ${glassfish.install.dir}...backing up."/>
        <copy todir="${glassfish.install.dir.root}/.backup.${glassfish.install.dir.name}.${DSTAMP}_${TSTAMP}">
            <fileset dir="${glassfish.install.dir}"/>
        </copy>
    </target>

    <target name="install" depends="determine.os, setup.properties, backup.glassfish.install.dir, install.glassfish.with.metro, install.databases, cleanup"/>
    
    <target name="cleanup">
        <delete dir="${temp.dir}"/>
    </target>
    
    <target name="install.glassfish.with.metro">
    	<echo message="installing glassfish."/>
        <delete dir="${temp.dir}"/>
        <delete dir="${glassfish.install.dir}"/>
        <mkdir dir="${temp.dir}"/>
        <unzip src="${glassfish.zip.file}" dest="${temp.dir}"/>
        <move todir="${glassfish.install.dir}">
            <fileset dir="${temp.dir}/glassfish"/>
        </move>
        <replace file="${glassfish.install.ant.script}">
            <replacetoken><![CDATA[<contains string="${targeted.java.version}" substring="1.5"/>
         <contains string="${targeted.java.version}" substring="1.6"/>]]></replacetoken>
            <replacevalue><![CDATA[<contains string="${targeted.java.version}" substring="1.7"/>]]></replacevalue>
        </replace>
        <replace file="${glassfish.install.ant.script}" token="requires JDK 1.5 or higher" value="requires JDK 1.7"/>
        <ant antfile="${glassfish.install.ant.script}" dir="${glassfish.install.dir}"/>
    	<echo message="installing metro into glassfish."/>
        <unzip src="${metro.zip.file}" dest="${temp.dir}"/>
        <ant antfile="${metro.install.ant.script}" dir="${temp.dir}/metro" target="install">
            <property name="as.home" value="${glassfish.install.dir}"/>
        </ant>
    	<echo message="setting up self-signed certificates and trustores/keystores."/>
        <exec failonerror="true" executable="keytool" dir="${temp.dir}">
            <arg line="-genkey -keyalg RSA -keysize 1024 -keystore gateway.jks -keypass changeit -storepass changeit -validity 365 -alias gateway -dname &quot;cn=localhost&quot;"/>
        </exec>
        <exec failonerror="true" executable="keytool" dir="${temp.dir}">
            <arg line="-export -rfc -alias gateway -file localhost.cer -keystore gateway.jks -keypass changeit -storepass changeit"/>
        </exec>
        <exec failonerror="true" executable="keytool" dir="${temp.dir}">
            <arg line="-import -v -trustcacerts -alias localhost -file localhost.cer -keystore cacerts.jks"/>
        </exec>
        <copy todir="${glassfish.install.dir}/domains/domain1/config">
        	<fileset dir="${temp.dir}">
      			<include name="gateway.jks"/>
      			<include name="cacerts.jks"/>
    		</fileset>
        </copy>
    </target>
    
    <target name="install.databases">
        <exec failonerror="true" executable="mysql" dir="${sql.scripts.dir}" input="${sql.scripts.dir}/dropall.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <exec failonerror="true" executable="mysql" dir="${sql.scripts.dir}" input="${sql.scripts.dir}/nhincdb.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <exec failonerror="true" executable="mysql" dir="${sql.scripts.dir}" input="${sql.scripts.dir}/populateTestData.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <echo file="${temp.dir}/show.databases.sql" message="SHOW DATABASES;"/>
        <exec failonerror="true" executable="mysql" dir="${temp.dir}" input="${temp.dir}/show.databases.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <echo file="${temp.dir}/privileges.sql">GRANT ALL PRIVILEGES ON *.* TO 'nhincuser'@'localhost' IDENTIFIED BY 'nhincpass' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'nhincuser'@'127.0.0.1' IDENTIFIED BY 'nhincpass' WITH GRANT OPTION;
FLUSH PRIVILEGES;
        </echo>
        <exec failonerror="true" executable="mysql" dir="${temp.dir}" input="${temp.dir}/privileges.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <exec failonerror="true" executable="mysql" dir="${basedir}">
            <arg value="-unhincuser" />
            <arg value="-pnhincpass" />
        </exec>
        <echo message="databases are successfully installed."/>
    </target>

</project>