<?xml version="1.0" encoding="UTF-8"?>
<project name="CONNECT.Automated.Installer" default="install" basedir=".">

    <property name="info.log" value="${basedir}/install.info.log" />
    <property name="debug.log" value="${basedir}/install.debug.log" />

    <record name="${debug.log}" append="false" loglevel="debug" />
    <record name="${info.log}" append="false" loglevel="info" />

    <echo message="CONNECT installation logs can be found here: ${debug.log} (debug-level) and ${info.log} (info-level)." />

    <tstamp />

    <dirname property="CONNECT.Automated.Installer.basedir" file="${ant.file.CONNECT.Automated.Installer}" />

    <property environment="env" />
    <property name="properties.file" value="${CONNECT.Automated.Installer.basedir}/local.install.properties" />

    <available file="${properties.file}" type="file" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="Did not find properties file ${properties.file}" />

    <property file="${properties.file}" />
    <property name="thirdparty.dir" location="${CONNECT.Automated.Installer.basedir}/../../ThirdParty" />
    <property name="glassfish.install.dir" value="${glassfish.install.dir.root}/${glassfish.install.dir.name}" />
    <property name="temp.dir" value="${basedir}/.installer.temp" />
    <property name="glassfish.install.ant.script" value="${glassfish.install.dir}/setup.xml" />
    <property name="sql.scripts.dir" value="${basedir}/../DBScripts/nhincdb" />
    <property name="mysql.executable" value="mysql" />
    <property name="glassfish.zip.file" value="${temp.dir}/glassfish-3.1.1.zip" />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <fileset dir="${thirdparty.dir}/AntExtraLibs">
                <include name="ant-contrib-*.jar" />
            </fileset>
        </classpath>
    </taskdef>

    <mkdir dir="${temp.dir}" />
    <delete>
        <fileset dir="${temp.dir}">
            <include name="**/*" />
            <exclude name="glassfish-3.1.1.zip" />
        </fileset>
    </delete>

    <available file="${glassfish.install.dir}" type="dir" property="glassfish.install.dir.exists" />

    <if>
        <not>
            <available file="${glassfish.zip.file}" type="file" />
        </not>
        <then>
            <get src="http://download.java.net/glassfish/3.1.1/release/glassfish-3.1.1.zip" dest="${glassfish.zip.file}" />
        </then>
    </if>

    <target name="install" depends="backup.glassfish.install.dir, install.glassfish, install.databases, build.connect, deploy.connect, cleanup" />

    <target name="install-binary" depends="backup.glassfish.install.dir, install.glassfish, install.databases, deploy.connect.binary, cleanup" />

    <target name="backup.glassfish.install.dir" if="glassfish.install.dir.exists" unless="skip.backup">
        <property name="backup.dir" value="${glassfish.install.dir.root}/.backup.${glassfish.install.dir.name}.${DSTAMP}_${TSTAMP}" />
        <echo message="WARNING: glassfish appears to already be installed at ${glassfish.install.dir}...backing up to ${backup.dir}." />
        <copy todir="${backup.dir}">
            <fileset dir="${glassfish.install.dir}" />
        </copy>
    </target>

    <target name="cleanup">
        <delete>
            <fileset dir="${temp.dir}">
                <include name="**/*" />
                <exclude name="glassfish-3.1.1.zip" />
            </fileset>
        </delete>
    </target>

    <target name="install.glassfish">
        <echo message="installing glassfish." />
        <delete dir="${glassfish.install.dir}" />
        <unzip src="${glassfish.zip.file}" dest="${temp.dir}" />
        <move todir="${glassfish.install.dir}">
            <fileset dir="${temp.dir}/glassfish3" />
        </move>
        <chmod file="${glassfish.install.dir}/glassfish/bin/asadmin" perm="ugo+rx">
            <fileset dir="${glassfish.install.dir}">
                <include name="**/bin/asadmin" />
            </fileset>
        </chmod>
        <copy file="${basedir}/GlassFish/templates/connect/domain.selfsigned.xml.template" tofile="${temp.dir}/domain.selfsigned.xml.template" overwrite="true" />
        <replace file="${temp.dir}/domain.selfsigned.xml.template" token="gateway" value="${cert.keystore.name}" />
        <delete dir="${glassfish.install.dir}/glassfish/domains/domain1" />
        <echo message="creating CONNECT glassfish domain." />
        <ant antfile="${basedir}/deploy.xml" dir="${basedir}" target="recreate.glassfish.domain">
            <property name="deployment.domain.template.file.path" value="${temp.dir}/domain.selfsigned.xml.template" />
            <property name="glassfish.home" value="${glassfish.install.dir}/glassfish" />
            <property name="use.non.defaults" value="true" />
            <property name="source.install" value="true" />
        </ant>
        <antcall target="create.certs" />
    </target>

    <target name="create.certs">
        <echo message="creating self-signed certificates and trustores/keystores for glassfish." />
        <exec failonerror="true" executable="keytool" dir="${temp.dir}">
            <arg line="-v -genkey -keyalg ${cert.key.algorithm} -keysize ${cert.key.size} -keystore ${cert.keystore.name}.jks -keypass ${cert.keypass} -storepass ${cert.storepass} -validity ${cert.validity.length} -alias ${cert.keystore.name} -dname &quot;cn=${cert.cn}&quot;" />
        </exec>
        <exec failonerror="true" executable="keytool" dir="${temp.dir}">
            <arg line="-v -export -rfc -alias ${cert.keystore.name} -file ${cert.cn}.cer -keystore ${cert.keystore.name}.jks -keypass ${cert.keypass} -storepass ${cert.storepass}" />
        </exec>
        <exec failonerror="true" executable="keytool" dir="${temp.dir}">
            <arg line="-v -import -keypass ${cert.keypass} -noprompt -trustcacerts -alias ${cert.cn} -file ${cert.cn}.cer -keystore ${cert.store.name}.jks -storepass ${cert.storepass}" />
        </exec>
        <copy todir="${glassfish.install.dir}/glassfish/domains/domain1/config" overwrite="true">
            <fileset dir="${temp.dir}">
                <include name="${cert.keystore.name}.jks" />
                <include name="${cert.store.name}.jks" />
            </fileset>
        </copy>
    </target>

    <target name="install.databases">
        <echo message="installing MySQL databases and connection users." />
        <exec failonerror="true" executable="${mysql.executable}" dir="${sql.scripts.dir}" input="${sql.scripts.dir}/dropall.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <exec failonerror="true" executable="${mysql.executable}" dir="${sql.scripts.dir}" input="${sql.scripts.dir}/nhincdb.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <exec failonerror="true" executable="${mysql.executable}" dir="${sql.scripts.dir}" input="${sql.scripts.dir}/populateTestData.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <echo file="${temp.dir}/show.databases.sql" message="SHOW DATABASES;" />
        <exec failonerror="true" executable="${mysql.executable}" dir="${temp.dir}" input="${temp.dir}/show.databases.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <echo file="${temp.dir}/privileges.sql">GRANT ALL PRIVILEGES ON *.* TO 'nhincuser'@'localhost' IDENTIFIED BY 'nhincpass' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'nhincuser'@'127.0.0.1' IDENTIFIED BY 'nhincpass' WITH GRANT OPTION;
FLUSH PRIVILEGES;
        </echo>
        <exec failonerror="true" executable="${mysql.executable}" dir="${temp.dir}" input="${temp.dir}/privileges.sql">
            <arg value="-v" />
            <arg value="-uroot" />
            <arg value="-p${mysql.system.password}" />
        </exec>
        <exec failonerror="true" executable="${mysql.executable}" dir="${basedir}">
            <arg value="-unhincuser" />
            <arg value="-pnhincpass" />
        </exec>
        <echo message="databases are successfully installed." />
    </target>

    <target name="build.connect" unless="skip.build">
        <echo message="building CONNECT." />
        <ant antfile="${basedir}/../build.xml" dir="${basedir}/..">
            <target name="clean" />
            <target name="package.create" />
            <property name="as.home" value="${glassfish.install.dir}/glassfish" />
            <property name="source.install" value="true" />
        </ant>
    </target>

    <target name="deploy.connect" unless="skip.deploy">
        <echo message="deploying CONNECT." />
        <ant antfile="${basedir}/../build.xml" dir="${basedir}/.." target="deploy">
            <property name="glassfish.home" value="${glassfish.install.dir}/glassfish" />
        </ant>
    </target>

    <target name="deploy.connect.binary" unless="skip.deploy">
        <echo message="deploying CONNECT for binary scenario." />
        <ant antfile="${basedir}/deploy.xml" dir="${basedir}" target="deploy">
            <property name="glassfish.home" value="${glassfish.install.dir}/glassfish" />
            <property name="deployment.dir" value="${basedir}" />
        </ant>
    </target>

</project>
