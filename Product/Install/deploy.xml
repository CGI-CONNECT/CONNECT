<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="nhinc.deployment" default="deploy">

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
  <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" />
  
  <if>
    <isset property="project.name" />
    <then>
      <property name="script.root.directory" value="${root.project.directory.path}/Install"/>
    </then>
    <else>
      <property name="script.root.directory" value="${basedir}"/>
    </else>
  </if>

  <import file="settings.xml" />

  <taskdef resource="com/sun/tools/appserver/antlib.xml">
    <classpath>
      <pathelement location="${glassfish.home}/lib/sun-appserv-ant.jar"/>
      <pathelement location="${glassfish.home}/jbi/lib/jbi-ant-tasks.jar"/>
      <pathelement location="${glassfish.home}/javadb/lib/derby.jar"/>

      <pathelement location="${glassfish.home}/jbi/lib/jbi-admin-cli.jar"/>
      <pathelement location="${glassfish.home}/jbi/lib/jbi-admin-common.jar"/>
      <pathelement location="${glassfish.home}/lib/appserv-rt.jar"/>
      <pathelement location="${glassfish.home}/lib/appserv-ext.jar"/>
      <pathelement location="${glassfish.home}/lib/javaee.jar"/>
      <pathelement location="${glassfish.home}/lib/appserv-se.jar"/>
      <pathelement location="${glassfish.home}/lib/admin-cli.jar"/>
      <pathelement location="${glassfish.home}/lib/appserv-admin.jar"/>
      <pathelement location="${glassfish.home}/lib/install/applications/jmsra/imqjmsra.jar"/>
    </classpath>
  </taskdef>

  <!--
  These properties should be defined in project build.xml files:
  
  <property name="deploy.type" value="ejb" description="options:['war', 'ejb', 'shared']" />
  -->

  <tempfile prefix="glassfish" property="deploy.glassfish.password.file.path" destdir="${java.io.tmpdir}" deleteonexit="true"/>
  <echo message="AS_ADMIN_PASSWORD=${deployment.glassfish.server.admin.password}" file="${deploy.glassfish.password.file.path}"/>
  <property name="deploy.application.list.file.path" value="${script.root.directory}/deploy.application.list.xml"/>
  <property name="deploy.exclusion.file.path" value="${script.root.directory}/exclusions.txt"/>

  <if>
    <available file="deploy.exclusion.file.path"/>
    <then>
      <loadfile property="deploy.exclusion.list" srcFile="${deploy.exclusion.file.path}"/>
      <for list="${deploy.exclusion.list}" delimiter="${line.separator}" param="exclusion">
        <sequential>
          <property name="deploy.exclude.${exclusion}" value="true"/>
        </sequential>
      </for>
    </then>
  </if>

  <target name="deploy">
    <if>
      <isset property="project.name" />
      <then>
        <antcall target="deploy.to.development" />
      </then>
      <else>
        <antcall target="deploy.to.production" />
      </else>
    </if>
  </target>

  <target name="undeploy">
    <if>
      <isset property="project.name" />
      <then>
        <antcall target="undeploy.from.development" />
      </then>
      <else>
        <antcall target="undeploy.from.production" />
      </else>
    </if>
  </target>

  <target name="deploy.to.production">
    <runtarget target="deploy.glassfish.stop.server"/>
    <runtarget target="deploy.shared.libs.to.glassfish"/>
    
    <runtarget target="deploy.glassfish.start.server"/>
    <runtarget target="deploy.wars.to.glassfish"/>
    <runtarget target="deploy.ejbs.to.glassfish"/>
  </target>
  
  <target name="undeploy.from.production">
    <runtarget target="deploy.glassfish.start.server"/>
    <runtarget target="undeploy.wars.from.glassfish"/>
    <runtarget target="undeploy.ejbs.from.glassfish"/>

    <runtarget target="deploy.glassfish.stop.server"/>
    <runtarget target="undeploy.shared.libs.from.glassfish"/>
  </target>

  <target name="deploy.glassfish.start.server">
    <sun-appserv-admin
      explicitcommand="start-domain ${deployment.glassfish.domain.name}"
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="deploy.glassfish.stop.server">
    <sun-appserv-admin
      explicitcommand="stop-domain ${deployment.glassfish.domain.name}"
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="deploy.ejbs.to.glassfish">
    <var name="target" value="deploy.ejb.to.glassfish"/>
    <runtarget target="target.to.call.on.ejbs"/>
  </target>

  <target name="undeploy.ejbs.from.glassfish">
    <var name="target" value="undeploy.ejb.from.glassfish"/>
    <runtarget target="target.to.call.on.ejbs"/>
  </target>
  
  <target name="target.to.call.on.ejbs">
    <xmltask source="${deploy.application.list.file.path}">
      <call path="/applications/ejbs/ejb">
        <param name="ejb.name" path="name/text()" />
        <actions>
          <if>
            <not>
              <isset property="deploy.exclude.@{ejb.name}"/>
            </not>
            <then>
              <var name="deployment.glassfish.ejb.file.path" value="${deployment.binaries.dir}/@{ejb.name}.jar"/>
              <var name="deployment.glassfish.ejb.name" value="@{ejb.name}"/>
              <runtarget target="${target}"/>
            </then>
          </if>
        </actions>
      </call>
    </xmltask>
  </target>

  <target name="deploy.wars.to.glassfish">
    <var name="target" value="deploy.war.to.glassfish"/>
    <runtarget target="target.to.call.on.wars"/>
  </target>

  <target name="undeploy.wars.from.glassfish">
    <var name="target" value="undeploy.war.from.glassfish"/>
    <runtarget target="target.to.call.on.wars"/>
  </target>

  <target name="target.to.call.on.wars">
    <xmltask source="${deploy.application.list.file.path}">
      <call path="/applications/wars/war">
        <param name="war.name" path="name/text()" />
        <actions>
          <if>
            <not>
              <isset property="deploy.exclude.@{war.name}"/>
            </not>
            <then>
              <var name="deployment.glassfish.war.file.path" value="${deployment.binaries.dir}/@{war.name}.war"/>
              <var name="deployment.glassfish.war.name" value="@{war.name}"/>
              <runtarget target="${target}"/>
            </then>
          </if>
        </actions>
      </call>
    </xmltask>
  </target>

  <target name="deploy.shared.libs.to.glassfish">
    <var name="target" value="deploy.shared.lib.to.glassfish"/>
    <runtarget target="target.to.call.on.shared.libs"/>
  </target>

  <target name="undeploy.shared.libs.from.glassfish">
    <var name="target" value="undeploy.shared.lib.from.glassfish"/>
    <runtarget target="target.to.call.on.shared.libs"/>
  </target>
  
  <target name="target.to.call.on.shared.libs">
    <xmltask source="${deploy.application.list.file.path}">
      <call path="/applications/shared/lib">
        <param name="shared.name" path="name/text()" />
        <actions>
          <if>
            <not>
              <isset property="deploy.exclude.@{shared.name}"/>
            </not>
            <then>
              <var name="deployment.glassfish.shared.lib.file.path" value="${deployment.binaries.dir}/@{shared.name}.jar"/>
              <runtarget target="${target}"/>
            </then>
          </if>
        </actions>
      </call>
    </xmltask>
  </target>
  
  <target name="deploy.to.development">
    <echo message="Attempting to deploy package for project ${project.name}." />

    <mkdir dir="${deployment.binaries.dir}" />
    <copy todir="${deployment.binaries.dir}" file="${dist.file}" overwrite="true"/>

    <switch value="${deploy.type}">
      <case value="ejb">
        <var unset="true" name="deployment.glassfish.ejb.name" />
        <basename file="${dist.file}" property="deployment.glassfish.ejb.name" suffix=".jar" />
        <var name="deployment.glassfish.ejb.file.path" value="${deployment.binaries.dir}/${deployment.glassfish.ejb.name}.jar" />
        <runtarget target="deploy.ejb.to.glassfish" />
      </case>
      <case value="war">
        <var unset="true" name="deployment.glassfish.war.name" />
        <basename file="${dist.file}" property="deployment.glassfish.war.name" suffix=".war" />
        <var name="deployment.glassfish.war.file.path" value="${deployment.binaries.dir}/${deployment.glassfish.war.name}.war" />
        <runtarget target="deploy.war.to.glassfish" />
      </case>
      <case value="shared">
        <var unset="true" name="deployment.glassfish.shared.lib.name" />
        <basename file="${dist.file}" property="deployment.glassfish.shared.lib.name" suffix=".jar" />
        <var name="deployment.glassfish.shared.lib.file.path" value="${deployment.binaries.dir}/${deployment.glassfish.shared.lib.name}.jar" />
        <runtarget target="deploy.glassfish.stop.server"/>
        <runtarget target="deploy.shared.lib.to.glassfish" />
        <runtarget target="deploy.glassfish.start.server"/>
      </case>
      <default>
        <fail message="Tag your it! Deploying ${dist.type}s has not yet been implemented, you can write it..." />
      </default>
    </switch>
  </target>
  
  <target name="copy.artifacts.to.development">
    <echo message="Attempting to copy package for project ${project.name}." />

    <mkdir dir="${deployment.binaries.dir}" />
    
    <copy todir="${deployment.binaries.dir}" file="${dist.file}" overwrite="true"/>    
  </target>
  
  <target name="undeploy.from.development">
    <echo message="Attempting to undeploy package for project ${project.name}." />

    <switch value="${deploy.type}">
      <case value="ejb">
        <var unset="true" name="deployment.glassfish.ejb.name" />
        <basename file="${dist.file}" property="deployment.glassfish.ejb.name" suffix=".jar" />
        <var name="deployment.glassfish.ejb.file.path" value="${deployment.binaries.dir}/${deployment.glassfish.ejb.name}.jar" />
        <runtarget target="undeploy.ejb.from.glassfish" />
      </case>
      <case value="war">
        <var unset="true" name="deployment.glassfish.war.name" />
        <basename file="${dist.file}" property="deployment.glassfish.war.name" suffix=".war" />
        <var name="deployment.glassfish.war.file.path" value="${deployment.binaries.dir}/${deployment.glassfish.war.name}.war" />
        <runtarget target="undeploy.war.from.glassfish" />
      </case>
      <case value="shared">
		    <echo message="A shared J2EE libraries or optional package cannot be undeployed until all applications that reference the library or package are first undeployed. If no applications reference an application or package you can safely remove it."/>
      </case>
      <default>
        <fail message="Tag your it! Deploying ${dist.type}s has not yet been implemented, you can write it..." />
      </default>
    </switch>
  </target>
  
  <target name="deploy.ejb.to.glassfish">
    <sun-appserv-deploy
      user="${deployment.glassfish.server.username}"
      passwordfile="${deploy.glassfish.password.file.path}"
      host="${deployment.glassfish.server}"
      port="${deployment.glassfish.admin.port}"
      file="${deployment.glassfish.ejb.file.path}"
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="undeploy.ejb.from.glassfish">
    <sun-appserv-undeploy
      user="${deployment.glassfish.server.username}"
      passwordfile="${deploy.glassfish.password.file.path}"
      host="${deployment.glassfish.server}"
      port="${deployment.glassfish.admin.port}"
      name="${deployment.glassfish.ejb.name}"
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="deploy.war.to.glassfish">
    <sun-appserv-deploy
      user="${deployment.glassfish.server.username}"
      passwordfile="${deploy.glassfish.password.file.path}"
      host="${deployment.glassfish.server}"
      port="${deployment.glassfish.admin.port}"
      file="${deployment.glassfish.war.file.path}"
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="undeploy.war.from.glassfish">
    <sun-appserv-undeploy
      user="${deployment.glassfish.server.username}"
      passwordfile="${deploy.glassfish.password.file.path}"
      host="${deployment.glassfish.server}"
      port="${deployment.glassfish.admin.port}"
      name="${deployment.glassfish.war.name}"
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="deploy.shared.lib.to.glassfish">
    <copy file="${deployment.glassfish.shared.lib.file.path}" todir="${glassfish.home}/lib" overwrite="true" />
  </target>
  
  <target name="undeploy.shared.lib.from.glassfish">
    <basename property="deployment.glassfish.shared.lib.file.name" file="${deployment.glassfish.shared.lib.file.path}"/>
    <delete file="${glassfish.home}/lib/${deployment.glassfish.shared.lib.file.name}" />
  </target>

  <target name="unlock.glassfish.domain">
    <exec executable="\Program Files\Unlocker\Unlocker.exe">
		<arg value="${deployment.glassfish.domain.home}"/>
		<arg value="-S"/>
	</exec>
  </target>
  
  <target name="delete.glassfish.domain">
     <runtarget target="unlock.glassfish.domain"/>
     <runtarget target="deploy.glassfish.stop.server"/>
    <sun-appserv-admin 
      explicitcommand="delete-domain ${deployment.glassfish.domain.name}"
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="create.glassfish.domain">
    <sun-appserv-admin 
      explicitcommand='create-domain --profile developer --user ${deployment.glassfish.server.username} --adminport ${deployment.glassfish.admin.port} --passwordfile "${deploy.glassfish.password.file.path}" --savemasterpassword=true ${deployment.glassfish.domain.name}'
      asinstalldir="${glassfish.home}"
    />
  </target>

  <target name="configure.glassfish.domain">
    <runtarget target="deploy.glassfish.start.server"/>

    <propertycopy  name="deployment.glassfish.domain.delete.jvm.options" from="deployment.glassfish.${deployment.environment.configuration.dir.name}.domain.delete.jvm.options"/>
    <sun-appserv-admin
      command='delete-jvm-options --target server ${deployment.glassfish.domain.delete.jvm.options}'
      user="${deployment.glassfish.server.username}"
      passwordfile="${deploy.glassfish.password.file.path}"
      host="${deployment.glassfish.server}"
      port="${deployment.glassfish.admin.port}"
      asinstalldir="${glassfish.home}"
    />
    
    <propertycopy  name="deployment.glassfish.domain.create.jvm.options" from="deployment.glassfish.${deployment.environment.configuration.dir.name}.domain.create.jvm.options"/>
    <sun-appserv-admin
      command='create-jvm-options --target server ${deployment.glassfish.domain.create.jvm.options}'
      user="${deployment.glassfish.server.username}"
      passwordfile="${deploy.glassfish.password.file.path}"
      host="${deployment.glassfish.server}"
      port="${deployment.glassfish.admin.port}"
      asinstalldir="${glassfish.home}"
    />

    <runtarget target="deploy.glassfish.stop.server"/>
    
    <runtarget target="glassfish.install.domain.certificates"/>
  </target>

  <target name="backup.glassfish.domain">
    <copy todir="${deployment.dir}/backup" verbose="true" overwrite="true">
      <filelist dir="${deployment.glassfish.domain.config.home}">
        <file name="log4j.properties"/>
        <file name="mpi.xml"/>
      </filelist>
    </copy>
  </target>

  <target name="restore.glassfish.domain">
    <copy todir="${deployment.glassfish.domain.config.home}"  verbose="true" overwrite="true">
      <filelist dir="${deployment.dir}/backup">
        <file name="log4j.properties"/>
        <file name="mpi.xml"/>
      </filelist>
    </copy>
  </target>

  <target name="deploy.glassfish.nhinc.configuration">
    <copy todir="${deployment.glassfish.domain.config.home}/nhin" verbose="true" overwrite="true">
      <fileset dir="${deployment.dir}/${deployment.environment.configuration.dir.name}"/>
    </copy>
  </target>

  <target name="glassfish.restore.domain.certificates">
    <copy todir="${deployment.glassfish.domain.config.home}"  verbose="true" overwrite="true">
      <filelist dir="${deployment.certificate.home}">
        <file name="keystore.jks"/>
        <file name="cacerts.jks"/>
      </filelist>
    </copy>
  </target>
  
  <target name="glassfish.install.domain.certificates">
    <copy todir="${deployment.glassfish.domain.config.home}" overwrite="true" verbose="true">
      <fileset dir="${deployment.certificate.home}">
        <include name="*.jks"/>
      </fileset>
    </copy>
  
	<propertycopy name="deployment.glassfish.domain.keystore.alias" from="deployment.glassfish.${deployment.environment.configuration.dir.name}.domain.keystore.alias"/>
    <xmltask source="${deployment.glassfish.domain.config.home}/domain.xml" dest="${deployment.glassfish.domain.config.home}/domain.xml" preserveType="true">
      <replace path="//*[@*='s1as']/@value | //*[@*='s1as']/@cert-nickname" withText="${deployment.glassfish.domain.keystore.alias}"/> 
    </xmltask> 
  </target>
  
  <target name="recreate.glassfish.domain">
    <runtarget target="backup.glassfish.domain"/>
    <runtarget target="delete.glassfish.domain"/>
    <runtarget target="create.glassfish.domain"/>
    <runtarget target="restore.glassfish.domain"/>
    <runtarget target="configure.glassfish.domain"/>
    <runtarget target="deploy.glassfish.nhinc.configuration"/>
  </target>
  
</project>
