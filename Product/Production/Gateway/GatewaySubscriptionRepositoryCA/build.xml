<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="" default="default" basedir="." xmlns:web="http://www.netbeans.org/ns/j2ee-ejbjarproject/1">
    <description>Builds, tests, and runs the project .</description>
<import file="../../../build.lib.xml" />
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      pre-init:                 called before initialization of project properties 
      post-init:                called after initialization of project properties 
      pre-compile:              called before javac compilation 
      post-compile:             called after javac compilation 
      pre-compile-single:       called before javac compilation of single file
      post-compile-single:      called after javac compilation of single file
      pre-dist:                 called before jar building 
      post-dist:                called after jar building 
      post-clean:               called after cleaning build products 

    Example of pluging an obfuscator after the compilation could look like 

        <target name="post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                jar archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
    <target name="-check-netbeans-home">
        <condition property="no.netbeans.home">
            <not>
                <isset property="netbeans.home"/>
            </not>
        </condition>
    </target>
    <target name="-init-caps" if="no.netbeans.home">
        <property file="${basedir}/nbproject/private/private.properties"/>
        <property name="netbeans.home" value="${caps.netbeans.home}/platform8"/>
        <property name="netbeans.user" value="${caps.netbeans.user}"/>
        <property name="from.commandline" value="true"/>
    </target>
    <target name="-check-catd-context">
        <condition property="no.catd.context">
            <not>
                <isset property="org.netbeans.modules.compapp.catd.context"/>
            </not>
        </condition>
    </target>
    <target name="-init-catd" if="no.catd.context">
        <property name="org.netbeans.modules.compapp.catd.context" value=""/>
    </target>
    <target name="pre-init" depends="-check-netbeans-home,-init-caps,-check-catd-context,-init-catd"/>
    <target name="deps-javaee-jar" depends="init" unless="${no.dependencies}">
        <ant dir="${project.GatewaySubscriptionRepositoryEJB}" target="dist" inheritall="false" antfile="${project.GatewaySubscriptionRepositoryEJB}/build.xml"/>
        <basename property="GatewaySubscriptionRepositoryEJB.su.name" file="${project.GatewaySubscriptionRepositoryEJB}"/>
        <property name="GatewaySubscriptionRepositoryEJB.su.dir" value="${src.dir}/../jbiServiceUnits/${GatewaySubscriptionRepositoryEJB.su.name}"/>
        <unzip src="${reference.GatewaySubscriptionRepositoryEJB.dist}" dest="${src.dir}/../jbiServiceUnits/${GatewaySubscriptionRepositoryEJB.su.name}">
            <patternset>
                <include name="**/*.wsdl"/>
                <include name="**/*.WSDL"/>
                <include name="**/*.xsd"/>
                <include name="**/*.XSD"/>
                <include name="META-INF/jbi.xml"/>
            </patternset>
        </unzip>
        <unzip src="${reference.GatewaySubscriptionRepositoryEJB.dist}" dest="${src.dir}/../jbiServiceUnits/META-INF/GatewaySubscriptionRepositoryEJB">
            <patternset>
                <include name="META-INF/catalog.xml"/>
            </patternset>
        </unzip>
        <jbi-javaee-dist projectName="GatewaySubscriptionRepositoryEJB" subprojJar="${reference.GatewaySubscriptionRepositoryEJB.dist}" subprojDir="${project.GatewaySubscriptionRepositoryEJB}" suExtractDir="${GatewaySubscriptionRepositoryEJB.su.dir}" subprojResource="${resource.GatewaySubscriptionRepositoryEJB}"/>
    </target>
    <target name="deps-clean" depends="init" unless="${no.dependencies}">
        <ant dir="${project.GatewaySubscriptionRepositoryEJB}" target="clean" inheritall="false" antfile="${project.GatewaySubscriptionRepositoryEJB}/build.xml"/>
    </target>
<!--    
    <target name="jbi-build" depends="init,init-deploy,deps-jar, deps-javaee-jar" description="Build Service Assembly.">
        <mkdir dir="${src.dir}"/>
        <copy todir="${src.dir}/../jbiServiceUnits" overwrite="true">
            <fileset dir="${src.dir}"/>
        </copy>
        <mkdir dir="${build.dir}/META-INF"/>
        
        <copy todir="${build.dir}/META-INF/${GatewaySubscriptionRepositoryEJB.su.dir}">
            <fileset dir="${src.dir}/../jbiServiceUnits/META-INF/${GatewaySubscriptionRepositoryEJB.su.name}"/>
        </copy>
        
        <jar compress="true" jarfile="${build.dir}/BCDeployment.jar">
            <fileset dir="${src.dir}/../jbiServiceUnits">
                <exclude name="**/catalog.xml"/>
                <exclude name="**/jbi.xml"/>
            </fileset>
        </jar>
        <jbi-build-service-assembly/>
        <delete file="${build.dir}/BCDeployment.jar"/>
        <dirname property="dist.jar.dir" file="${dist.jar}"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar compress="${jar.compress}" jarfile="${dist.jar}" filesetmanifest="merge">
            <fileset dir="${build.dir}" excludes="jar/*"/>
        </jar>
    </target>
-->
</project>
