<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="AdapterDocumentRepositoryEJB" default="default" basedir="." xmlns:ejbjarproject="http://www.netbeans.org/ns/j2ee-ejbjarproject/3">
    <description>Builds, tests, and runs the project AdapterDocumentRepositoryEJB.</description>
    <import file="nbproject/build-impl.xml"/>
    
    <import file="../../../../build.lib.xml" />
    <property name="deploy.type" value="ejb" />
    <property name="deploy.isDeployable" value="false"/>
		
    <target name="build">
        <property name="target-to-call" value="dist" />
        <antcall target="call-target-in-isolation-if-out-of-date" />
    </target>
    <target name="clean-build" depends="clean,dist" />
    <target name="clean-test" depends="clean,dist,test" />
    <target name="build-test" depends="dist,test" />

    <property name="deploy-type" value="" />
    <property name="deploy.isDeployable" value="false" />
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-dist:                 called before archive building
      -post-dist:                called after archive building
      -post-clean:               called after cleaning build products
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->

	<!-- Since the DocumentRegistry and DocumentRepository web services share the same namespace,
		 the second service that was generated would not complete since it thought the classes were
		 already generated based on the existence of the directory. It was therefore necessary to 
		 always copy and generate the schemas. -->    
    <!-- <target name="wsimport-service-DocumentRegistryService" depends="wsimport-init,wsimport-service-check-DocumentRegistryService" unless="wsimport-service-DocumentRegistryService.notRequired"> -->
       

    <target name="wsimport-service-DocumentRegistryService" depends="wsimport-init">
        <copy todir="${basedir}/${meta.inf}/wsdl/DocumentRegistryService">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-services/DocumentRegistryService/wsdl/"/>
        </copy>
        <copy todir="${basedir}/${meta.inf}/wsdl/schemas/">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-services/DocumentRegistryService/schemas/" />
        </copy>
    </target>
      <target name="wsimport-service-DocumentRepositoryService" depends="wsimport-init">
          <copy todir="${basedir}/${meta.inf}/wsdl/DocumentRepositoryService">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-services/DocumentRepositoryService/wsdl/"/>
        </copy>
        <copy todir="${basedir}/${meta.inf}/wsdl/schemas/">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-services/DocumentRepositoryService/schemas/" />
        </copy>
    </target>
    
    <target depends="init" if="no.dist.ear.dir" name="-deps-module-jar" unless="no.deps">
        <property name="project.AdapterDocumentRepository.Absolute" location="${project.AdapterDocumentRepository}"/>
    		
        <ant dir="${project.AdapterDocumentRepository.Absolute}" antfile="${project.AdapterDocumentRepository.Absolute}/build.xml" inheritall="false" target="jar"/>
    </target>
    <target depends="init" if="dist.ear.dir" name="-deps-ear-jar" unless="no.deps">
        <property name="project.AdapterDocumentRepository.Absolute" location="${project.AdapterDocumentRepository}"/>
    		
        <ant dir="${project.AdapterDocumentRepository.Absolute}" antfile="${project.AdapterDocumentRepository.Absolute}/build.xml" inheritall="false" target="jar"/>
    </target>
    <target depends="init" if="no.dist.ear.dir" name="deps-clean" unless="no.deps">
     
        <property name="project.AdapterDocumentRepository.Absolute" location="${project.AdapterDocumentRepository}"/>
    		
    		
        <ant dir="${project.AdapterDocumentRepository.Absolute}" antfile="${project.AdapterDocumentRepository.Absolute}/build.xml" inheritall="false" target="clean"/>
    </target>
    <target depends="compile" name="library-inclusion-in-archive">
        <copy file="${reference.AdapterDocumentRepository.jar}" todir="${build.classes.dir}"/>
    </target>
    <target depends="compile" name="library-inclusion-in-manifest">
        <basename file="${reference.AdapterDocumentRepository.jar}" property="included.lib.reference.AdapterDocumentRepository.jar"/>
        <copy file="${reference.AdapterDocumentRepository.jar}" todir="${dist.ear.dir}"/>

    </target>
    
    <target depends="init" if="netbeans.home" name="undeploy-clean" unless="from.commandline">
        <nbundeploy failOnError="false" startServer="false"/>
    </target>
    
    <target depends="init,compile-test,-pre-test-run,-do-test-run" if="have.tests" name="-post-test-run">
        <copy todir="${nhin.project.home}\UnitTestResults">
            <fileset dir="${build.test.results.dir}"/>
        </copy>
        <fail if="tests.failed" unless="ignore.failing.tests">Some tests failed; see details above.</fail>
    </target>    
</project>
