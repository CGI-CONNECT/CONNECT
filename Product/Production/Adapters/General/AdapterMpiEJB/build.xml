<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="AdapterMpiEJB" default="default" basedir="." xmlns:ejbjarproject="http://www.netbeans.org/ns/j2ee-ejbjarproject/3">
    <description>Builds, tests, and runs the project AdapterMpiEJB.</description>
    <import file="nbproject/build-impl.xml"/>
    
    		<import file="../../../../build.lib.xml" />
		
		<target name="build">
			<property name="target-to-call" value="dist" />
			<antcall target="call-target-in-isolation-if-out-of-date" />
		</target>
		<target name="clean-build" depends="clean,dist" />
		<target name="clean-test" depends="clean,dist" />
		<target name="build-test" depends="dist" />
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-dist:                 called before archive building
      -post-dist:                called after archive building
      -post-clean:               called after cleaning build products
      -pre-run-deploy:           called before deploying
      -post-run-deploy:          called after deploying

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of pluging an obfuscator after the compilation could look like 

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Other way how to customize the build is by overriding existing main targets.
    The target of interest are: 

      init-macrodef-javac:    defines macro for javac compilation
      init-macrodef-debug:    defines macro for class debugging
      do-dist:                archive building
      run:                    execution of project 
      javadoc-build:          javadoc generation 

    Example of overriding the target for project execution could look like 

        <target name="run" depends="<PROJNAME>-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that overridden target depends on jar target and not only on 
    compile target as regular run target does. Again, for list of available 
    properties which you can use check the target you are overriding in 
    nbproject/build-impl.xml file. 

    -->
    <!-- Had to pull this out of jaxws-build.xml because it copied the wsdl, but for some reason it 
         did not copy the schemas.  We have to copy the schemas ourselves or it will not deploy.  -->
    <target name="wsimport-service-AdapterMpi" depends="wsimport-init,wsimport-service-check-AdapterMpi" unless="wsimport-service-AdapterMpi.notRequired">
<!--
        <wsimport xendorsed="true" sourcedestdir="${build.generated.dir}/wsimport/service" extension="true" verbose="true" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-services/AdapterMpi/wsdl/AdapterMpi.wsdl" catalog="catalog.xml"/>
-->
        <echo message="copy wsdl's" />        
        <copy todir="${basedir}/${meta.inf}/wsdl/AdapterMpi">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-services/AdapterMpi/wsdl/"/>
        </copy>
        
        <echo message="copy schemas" />
        <copy todir="${basedir}/${meta.inf}/wsdl/schemas/">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-services/AdapterMpi/schemas/" />
        </copy>
    </target>
    
    <target name="wsimport-client-AdapterComponentMpi" depends="wsimport-init,wsimport-client-check-AdapterComponentMpi" unless="wsimport-client-AdapterComponentMpi.notRequired">
<!--
        <wsimport xendorsed="true" sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/AdapterComponentMpi/wsdl/AdapterComponentMpi.wsdl" wsdlLocation="file:/C:/projects/nhinc/Current/Product/Production/Common/Interfaces/src/wsdl/AdapterComponentMpi.wsdl" catalog="catalog.xml"/>
-->
        <echo message="generating binaries for referenced wsdl"/>        
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
        
        <echo message="copy wsdl's" />
        <copy todir="${basedir}/${meta.inf}/wsdl/client/AdapterComponentMpi">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-service-references/AdapterComponentMpi/wsdl/"/>
        </copy>
        
        <echo message="copy schemas" />
        <copy todir="${basedir}/${meta.inf}/wsdl/client/schemas/">
            <fileset dir="${basedir}/${meta.inf}/xml-resources/web-service-references/AdapterComponentMpi/schemas/" />
        </copy>
    </target>

    <target depends="init" if="no.dist.ear.dir" name="-deps-module-jar" unless="no.deps">
        <property name="project.NhincLib.Absolute" location="${project.NhincLib}"/>
        <ant dir="${project.NhincLib.Absolute}" antfile="${project.NhincLib.Absolute}/build.xml" inheritall="false" target="jar"/>
    </target>
    <target depends="init" if="dist.ear.dir" name="-deps-ear-jar" unless="no.deps">
        <property name="project.NhincLib.Absolute" location="${project.NhincLib}"/>
        <ant dir="${project.NhincLib.Absolute}" antfile="${project.NhincLib.Absolute}/build.xml" inheritall="false" target="jar"/>
    </target>
    <target depends="init" if="no.dist.ear.dir" name="deps-clean" unless="no.deps">
        <property name="project.NhincLib.Absolute" location="${project.NhincLib}"/>
        <ant dir="${project.NhincLib.Absolute}" antfile="${project.NhincLib.Absolute}/build.xml" inheritall="false" target="clean"/>
    </target>
    
    <target depends="compile" name="library-inclusion-in-archive">
        <copy file="${reference.NhincLib.jar}" todir="${build.classes.dir}"/>
    </target>
    <target depends="compile" name="library-inclusion-in-manifest">
        <basename file="${reference.NhincLib.jar}" property="included.lib.reference.NhincLib.jar"/>
        <copy file="${reference.NhincLib.jar}" todir="${dist.ear.dir}"/>
        <manifest file="${build.ear.classes.dir}/META-INF/MANIFEST.MF" mode="update">
            <attribute name="Class-Path" value="${included.lib.reference.NhincLib.jar}"/>
        </manifest>
    </target>
	<target depends="init" if="netbeans.home" name="undeploy-clean" unless="from.commandline">
        <nbundeploy failOnError="false" startServer="false"/>
    </target>    
</project>
