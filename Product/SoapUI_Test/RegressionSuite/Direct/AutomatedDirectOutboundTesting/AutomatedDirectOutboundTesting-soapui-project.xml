<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="AutomatedDirectOutboundTesting" resourceRoot="" soapui-version="4.5.1" abortOnError="false" runType="SEQUENTIAL" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config"><con:description>Sometimes the delays set in the testcases may not be enough. 
So we need to make sure the email the required MDNs/messages are received before we count event logs. 
Otherwise the event log count checking may fail.</con:description><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="ConfigurationServiceImplPortBinding" type="wsdl" bindingName="{http://impl.service.config.nhindirect.org/}ConfigurationServiceImplPortBinding" soapVersion="1_1" anonymous="optional" definition="../../../wsdl/ConfigurationServiceImplService.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="../../../wsdl/ConfigurationServiceImplService.wsdl"><con:part><con:url>${projectDir}/wsdl/ConfigurationServiceImplService.wsdl</con:url><con:content><![CDATA[<!--Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.7-b01-.-->
<definitions targetNamespace="http://impl.service.config.nhindirect.org/" name="ConfigurationServiceImplService" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://impl.service.config.nhindirect.org/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
  <import namespace="http://nhind.org/config" location="ConfigurationService.wsdl"/>
  <binding name="ConfigurationServiceImplPortBinding" type="ns1:ConfigurationService" xmlns:ns1="http://nhind.org/config">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="document"/>
    <operation name="getAddresss">
      <soap:operation soapAction="urn:GetAddresss"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addAddress">
      <soap:operation soapAction="urn:AddAddress"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateAddress">
      <soap:operation soapAction="urn:UpdateAddress"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getAddressCount">
      <soap:operation soapAction="urn:GetAddressCount"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeAddress">
      <soap:operation soapAction="urn:RemoveAddress"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="listAddresss">
      <soap:operation soapAction="urn:ListAddresss"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addDomain">
      <soap:operation soapAction="urn:AddDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDomain">
      <soap:operation soapAction="urn:UpdateDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDomainCount">
      <soap:operation soapAction="urn:GetDomainCount"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDomains">
      <soap:operation soapAction="urn:GetDomains"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeDomain">
      <soap:operation soapAction="urn:RemoveDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeDomainById">
      <soap:operation soapAction="urn:RemoveDomainById"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="listDomains">
      <soap:operation soapAction="urn:listDomains"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="searchDomain">
      <soap:operation soapAction="urn:SearchDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getDomain">
      <soap:operation soapAction="urn:GetDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="contains">
      <soap:operation soapAction="urn:Contains"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
    </operation>
    <operation name="getCertificates">
      <soap:operation soapAction="urn:GetCertificates"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addCertificates">
      <soap:operation soapAction="urn:AddCertificates"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="setCertificateStatus">
      <soap:operation soapAction="urn:SetCertificateStatus"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="setCertificateStatusForOwner">
      <soap:operation soapAction="urn:SetCertificateStatusForOwner"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeCertificates">
      <soap:operation soapAction="urn:RemoveCertificates"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeCertificatesForOwner">
      <soap:operation soapAction="urn:RemoveCertificatesForOwner"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getCertificate">
      <soap:operation soapAction="urn:GetCertificate"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getCertificatesForOwner">
      <soap:operation soapAction="urn:GetCertificatesForOwner"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="listCertificates">
      <soap:operation soapAction="urn:ListCertificates"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addAnchor">
      <soap:operation soapAction="urn:AddAnchor"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="setAnchorStatusForOwner">
      <soap:operation soapAction="urn:SetAnchorStatusForOwner"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeAnchors">
      <soap:operation soapAction="urn:RemoveAnchors"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeAnchorsForOwner">
      <soap:operation soapAction="urn:RemoveAnchorsForOwner"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getAnchor">
      <soap:operation soapAction="urn:GetAnchor"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getAnchors">
      <soap:operation soapAction="urn:GetAnchors"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getAnchorsForOwner">
      <soap:operation soapAction="urn:GetAnchorsForOwner"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getIncomingAnchors">
      <soap:operation soapAction="urn:GetIncomingAnchors"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getOutgoingAnchors">
      <soap:operation soapAction="urn:GetOutgoingAnchors"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="listAnchors">
      <soap:operation soapAction="urn:ListAnchors"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addSetting">
      <soap:operation soapAction="urn:AddSetting"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getAllSettings">
      <soap:operation soapAction="urn:GetAllSettings"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getSettingByName">
      <soap:operation soapAction="urn:GetSettingByName"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getSettingsByNames">
      <soap:operation soapAction="urn:GetSettingsByNames"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateSetting">
      <soap:operation soapAction="urn:UpdateSetting"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteSetting">
      <soap:operation soapAction="urn:DeleteSetting"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addDNS">
      <soap:operation soapAction="urn:AddDNS"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDNSByName">
      <soap:operation soapAction="urn:GetDNSByName"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDNSByNameAndType">
      <soap:operation soapAction="urn:GetDNSByNameAndType"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDNSByRecordId">
      <soap:operation soapAction="urn:GetDNSByRecordId"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDNSByRecordIds">
      <soap:operation soapAction="urn:GetDNSByRecordIds"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDNSByType">
      <soap:operation soapAction="urn:GetDNSByType"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getDNSCount">
      <soap:operation soapAction="urn:GetDNSCount"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeDNS">
      <soap:operation soapAction="urn:RemoveDNS"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeDNSByRecordId">
      <soap:operation soapAction="urn:RemoveDNSByRecordId"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removeDNSByRecordIds">
      <soap:operation soapAction="urn:RemoveDNSByRecordIds"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateDNS">
      <soap:operation soapAction="urn:UpdateDNS"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getTrustBundles">
      <soap:operation soapAction="urn:GetTrustBundles"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getTrustBundleByName">
      <soap:operation soapAction="urn:GetTrustBundleByName"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getTrustBundleById">
      <soap:operation soapAction="urn:GetTrustBundleById"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addTrustBundle">
      <soap:operation soapAction="urn:AddTrustBundle"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="refreshTrustBundle">
      <soap:operation soapAction="urn:RefreshTrustBundle"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateLastUpdateError">
      <soap:operation soapAction="urn:UpdateLastUpdateError"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="deleteTrustBundles">
      <soap:operation soapAction="urn:DeleteTrustBundles"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateTrustBundleSigningCertificate">
      <soap:operation soapAction="urn:UpdateTrustBundleSigningCertificate"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateTrustBundleAttributes">
      <soap:operation soapAction="urn:UpdateTrustBundleAttributes"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="associateTrustBundleToDomain">
      <soap:operation soapAction="urn:AssociateTrustBundleToDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="disassociateTrustBundleFromDomain">
      <soap:operation soapAction="urn:DisassociateTrustBundleFromDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="disassociateTrustBundlesFromDomain">
      <soap:operation soapAction="urn:DisassociateTrustBundlesFromDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="disassociateTrustBundleFromDomains">
      <soap:operation soapAction="urn:DisassociateTrustBundleFromDomains"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getTrustBundlesByDomain">
      <soap:operation soapAction="urn:GetTrustBundlesByDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicies">
      <soap:operation soapAction="urn:GetPolicies"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyByName">
      <soap:operation soapAction="urn:GetPolicyByName"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyById">
      <soap:operation soapAction="urn:GetPolicyById"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addPolicy">
      <soap:operation soapAction="urn:AddPolicy"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="deletePolicies">
      <soap:operation soapAction="urn:DeletePolicies"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updatePolicyAttributes">
      <soap:operation soapAction="urn:UpdatePolicyAttributes"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyGroups">
      <soap:operation soapAction="urn:GetPolicyGroups"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyGroupByName">
      <soap:operation soapAction="urn:GetPolicyGroupByName"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyGroupById">
      <soap:operation soapAction="urn:GetPolicyGroupById"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addPolicyGroup">
      <soap:operation soapAction="urn:AddPolicyGroup"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="deletePolicyGroups">
      <soap:operation soapAction="urn:DeletePolicyGroups"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="updateGroupAttributes">
      <soap:operation soapAction="urn:UpdateGroupAttributes"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="addPolicyUseToGroup">
      <soap:operation soapAction="urn:AddPolicyUseToGroup"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="removePolicyUseFromGroup">
      <soap:operation soapAction="urn:RemovePolicyUseFromGroup"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="associatePolicyGroupToDomain">
      <soap:operation soapAction="urn:AssociatePolicyGroupToDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="disassociatePolicyGroupFromDomain">
      <soap:operation soapAction="urn:DisassociatePolicyGroupFromDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="disassociatePolicyGroupsFromDomain">
      <soap:operation soapAction="urn:DisassociatePolicyGroupsFromDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="disassociatePolicyGroupFromDomains">
      <soap:operation soapAction="urn:DisassociatePolicyGroupFromDomains"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyGroupDomainReltns">
      <soap:operation soapAction="urn:GetPolicyGroupDomainReltns"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
    <operation name="getPolicyGroupsByDomain">
      <soap:operation soapAction="urn:GetPolicyGroupsByDomain"/>
      <input>
        <soap:body use="literal"/>
      </input>
      <output>
        <soap:body use="literal"/>
      </output>
      <fault name="ConfigurationServiceException">
        <soap:fault name="ConfigurationServiceException" use="literal"/>
      </fault>
    </operation>
  </binding>
  <service name="ConfigurationServiceImplService">
    <port name="ConfigurationServiceImplPort" binding="tns:ConfigurationServiceImplPortBinding">
      <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
    </port>
  </service>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>..\..\..\wsdl\ConfigurationService.wsdl</con:url><con:content><![CDATA[<!--Generated by JAX-WS RI at http://jax-ws.dev.java.net. RI's version is JAX-WS RI 2.1.7-b01-.-->
<definitions targetNamespace="http://nhind.org/config" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://nhind.org/config" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <types>
    <xsd:schema>
      <xsd:import namespace="http://nhind.org/config" schemaLocation="ConfigurationService_schema1.xsd"/>
    </xsd:schema>
  </types>
  <message name="getAddresss">
    <part name="parameters" element="tns:getAddresss"/>
  </message>
  <message name="getAddresssResponse">
    <part name="parameters" element="tns:getAddresssResponse"/>
  </message>
  <message name="ConfigurationServiceException">
    <part name="fault" element="tns:ConfigurationServiceException"/>
  </message>
  <message name="addAddress">
    <part name="parameters" element="tns:addAddress"/>
  </message>
  <message name="addAddressResponse">
    <part name="parameters" element="tns:addAddressResponse"/>
  </message>
  <message name="updateAddress">
    <part name="parameters" element="tns:updateAddress"/>
  </message>
  <message name="updateAddressResponse">
    <part name="parameters" element="tns:updateAddressResponse"/>
  </message>
  <message name="getAddressCount">
    <part name="parameters" element="tns:getAddressCount"/>
  </message>
  <message name="getAddressCountResponse">
    <part name="parameters" element="tns:getAddressCountResponse"/>
  </message>
  <message name="removeAddress">
    <part name="parameters" element="tns:removeAddress"/>
  </message>
  <message name="removeAddressResponse">
    <part name="parameters" element="tns:removeAddressResponse"/>
  </message>
  <message name="listAddresss">
    <part name="parameters" element="tns:listAddresss"/>
  </message>
  <message name="listAddresssResponse">
    <part name="parameters" element="tns:listAddresssResponse"/>
  </message>
  <message name="addDomain">
    <part name="parameters" element="tns:addDomain"/>
  </message>
  <message name="addDomainResponse">
    <part name="parameters" element="tns:addDomainResponse"/>
  </message>
  <message name="updateDomain">
    <part name="parameters" element="tns:updateDomain"/>
  </message>
  <message name="updateDomainResponse">
    <part name="parameters" element="tns:updateDomainResponse"/>
  </message>
  <message name="getDomainCount">
    <part name="parameters" element="tns:getDomainCount"/>
  </message>
  <message name="getDomainCountResponse">
    <part name="parameters" element="tns:getDomainCountResponse"/>
  </message>
  <message name="getDomains">
    <part name="parameters" element="tns:getDomains"/>
  </message>
  <message name="getDomainsResponse">
    <part name="parameters" element="tns:getDomainsResponse"/>
  </message>
  <message name="removeDomain">
    <part name="parameters" element="tns:removeDomain"/>
  </message>
  <message name="removeDomainResponse">
    <part name="parameters" element="tns:removeDomainResponse"/>
  </message>
  <message name="removeDomainById">
    <part name="parameters" element="tns:removeDomainById"/>
  </message>
  <message name="removeDomainByIdResponse">
    <part name="parameters" element="tns:removeDomainByIdResponse"/>
  </message>
  <message name="listDomains">
    <part name="parameters" element="tns:listDomains"/>
  </message>
  <message name="listDomainsResponse">
    <part name="parameters" element="tns:listDomainsResponse"/>
  </message>
  <message name="searchDomain">
    <part name="parameters" element="tns:searchDomain"/>
  </message>
  <message name="searchDomainResponse">
    <part name="parameters" element="tns:searchDomainResponse"/>
  </message>
  <message name="getDomain">
    <part name="parameters" element="tns:getDomain"/>
  </message>
  <message name="getDomainResponse">
    <part name="parameters" element="tns:getDomainResponse"/>
  </message>
  <message name="contains">
    <part name="parameters" element="tns:contains"/>
  </message>
  <message name="containsResponse">
    <part name="parameters" element="tns:containsResponse"/>
  </message>
  <message name="getCertificates">
    <part name="parameters" element="tns:getCertificates"/>
  </message>
  <message name="getCertificatesResponse">
    <part name="parameters" element="tns:getCertificatesResponse"/>
  </message>
  <message name="addCertificates">
    <part name="parameters" element="tns:addCertificates"/>
  </message>
  <message name="addCertificatesResponse">
    <part name="parameters" element="tns:addCertificatesResponse"/>
  </message>
  <message name="setCertificateStatus">
    <part name="parameters" element="tns:setCertificateStatus"/>
  </message>
  <message name="setCertificateStatusResponse">
    <part name="parameters" element="tns:setCertificateStatusResponse"/>
  </message>
  <message name="setCertificateStatusForOwner">
    <part name="parameters" element="tns:setCertificateStatusForOwner"/>
  </message>
  <message name="setCertificateStatusForOwnerResponse">
    <part name="parameters" element="tns:setCertificateStatusForOwnerResponse"/>
  </message>
  <message name="removeCertificates">
    <part name="parameters" element="tns:removeCertificates"/>
  </message>
  <message name="removeCertificatesResponse">
    <part name="parameters" element="tns:removeCertificatesResponse"/>
  </message>
  <message name="removeCertificatesForOwner">
    <part name="parameters" element="tns:removeCertificatesForOwner"/>
  </message>
  <message name="removeCertificatesForOwnerResponse">
    <part name="parameters" element="tns:removeCertificatesForOwnerResponse"/>
  </message>
  <message name="getCertificate">
    <part name="parameters" element="tns:getCertificate"/>
  </message>
  <message name="getCertificateResponse">
    <part name="parameters" element="tns:getCertificateResponse"/>
  </message>
  <message name="getCertificatesForOwner">
    <part name="parameters" element="tns:getCertificatesForOwner"/>
  </message>
  <message name="getCertificatesForOwnerResponse">
    <part name="parameters" element="tns:getCertificatesForOwnerResponse"/>
  </message>
  <message name="listCertificates">
    <part name="parameters" element="tns:listCertificates"/>
  </message>
  <message name="listCertificatesResponse">
    <part name="parameters" element="tns:listCertificatesResponse"/>
  </message>
  <message name="addAnchor">
    <part name="parameters" element="tns:addAnchor"/>
  </message>
  <message name="addAnchorResponse">
    <part name="parameters" element="tns:addAnchorResponse"/>
  </message>
  <message name="setAnchorStatusForOwner">
    <part name="parameters" element="tns:setAnchorStatusForOwner"/>
  </message>
  <message name="setAnchorStatusForOwnerResponse">
    <part name="parameters" element="tns:setAnchorStatusForOwnerResponse"/>
  </message>
  <message name="removeAnchors">
    <part name="parameters" element="tns:removeAnchors"/>
  </message>
  <message name="removeAnchorsResponse">
    <part name="parameters" element="tns:removeAnchorsResponse"/>
  </message>
  <message name="removeAnchorsForOwner">
    <part name="parameters" element="tns:removeAnchorsForOwner"/>
  </message>
  <message name="removeAnchorsForOwnerResponse">
    <part name="parameters" element="tns:removeAnchorsForOwnerResponse"/>
  </message>
  <message name="getAnchor">
    <part name="parameters" element="tns:getAnchor"/>
  </message>
  <message name="getAnchorResponse">
    <part name="parameters" element="tns:getAnchorResponse"/>
  </message>
  <message name="getAnchors">
    <part name="parameters" element="tns:getAnchors"/>
  </message>
  <message name="getAnchorsResponse">
    <part name="parameters" element="tns:getAnchorsResponse"/>
  </message>
  <message name="getAnchorsForOwner">
    <part name="parameters" element="tns:getAnchorsForOwner"/>
  </message>
  <message name="getAnchorsForOwnerResponse">
    <part name="parameters" element="tns:getAnchorsForOwnerResponse"/>
  </message>
  <message name="getIncomingAnchors">
    <part name="parameters" element="tns:getIncomingAnchors"/>
  </message>
  <message name="getIncomingAnchorsResponse">
    <part name="parameters" element="tns:getIncomingAnchorsResponse"/>
  </message>
  <message name="getOutgoingAnchors">
    <part name="parameters" element="tns:getOutgoingAnchors"/>
  </message>
  <message name="getOutgoingAnchorsResponse">
    <part name="parameters" element="tns:getOutgoingAnchorsResponse"/>
  </message>
  <message name="listAnchors">
    <part name="parameters" element="tns:listAnchors"/>
  </message>
  <message name="listAnchorsResponse">
    <part name="parameters" element="tns:listAnchorsResponse"/>
  </message>
  <message name="addSetting">
    <part name="parameters" element="tns:addSetting"/>
  </message>
  <message name="addSettingResponse">
    <part name="parameters" element="tns:addSettingResponse"/>
  </message>
  <message name="getAllSettings">
    <part name="parameters" element="tns:getAllSettings"/>
  </message>
  <message name="getAllSettingsResponse">
    <part name="parameters" element="tns:getAllSettingsResponse"/>
  </message>
  <message name="getSettingByName">
    <part name="parameters" element="tns:getSettingByName"/>
  </message>
  <message name="getSettingByNameResponse">
    <part name="parameters" element="tns:getSettingByNameResponse"/>
  </message>
  <message name="getSettingsByNames">
    <part name="parameters" element="tns:getSettingsByNames"/>
  </message>
  <message name="getSettingsByNamesResponse">
    <part name="parameters" element="tns:getSettingsByNamesResponse"/>
  </message>
  <message name="updateSetting">
    <part name="parameters" element="tns:updateSetting"/>
  </message>
  <message name="updateSettingResponse">
    <part name="parameters" element="tns:updateSettingResponse"/>
  </message>
  <message name="deleteSetting">
    <part name="parameters" element="tns:deleteSetting"/>
  </message>
  <message name="deleteSettingResponse">
    <part name="parameters" element="tns:deleteSettingResponse"/>
  </message>
  <message name="addDNS">
    <part name="parameters" element="tns:addDNS"/>
  </message>
  <message name="addDNSResponse">
    <part name="parameters" element="tns:addDNSResponse"/>
  </message>
  <message name="getDNSByName">
    <part name="parameters" element="tns:getDNSByName"/>
  </message>
  <message name="getDNSByNameResponse">
    <part name="parameters" element="tns:getDNSByNameResponse"/>
  </message>
  <message name="getDNSByNameAndType">
    <part name="parameters" element="tns:getDNSByNameAndType"/>
  </message>
  <message name="getDNSByNameAndTypeResponse">
    <part name="parameters" element="tns:getDNSByNameAndTypeResponse"/>
  </message>
  <message name="getDNSByRecordId">
    <part name="parameters" element="tns:getDNSByRecordId"/>
  </message>
  <message name="getDNSByRecordIdResponse">
    <part name="parameters" element="tns:getDNSByRecordIdResponse"/>
  </message>
  <message name="getDNSByRecordIds">
    <part name="parameters" element="tns:getDNSByRecordIds"/>
  </message>
  <message name="getDNSByRecordIdsResponse">
    <part name="parameters" element="tns:getDNSByRecordIdsResponse"/>
  </message>
  <message name="getDNSByType">
    <part name="parameters" element="tns:getDNSByType"/>
  </message>
  <message name="getDNSByTypeResponse">
    <part name="parameters" element="tns:getDNSByTypeResponse"/>
  </message>
  <message name="getDNSCount">
    <part name="parameters" element="tns:getDNSCount"/>
  </message>
  <message name="getDNSCountResponse">
    <part name="parameters" element="tns:getDNSCountResponse"/>
  </message>
  <message name="removeDNS">
    <part name="parameters" element="tns:removeDNS"/>
  </message>
  <message name="removeDNSResponse">
    <part name="parameters" element="tns:removeDNSResponse"/>
  </message>
  <message name="removeDNSByRecordId">
    <part name="parameters" element="tns:removeDNSByRecordId"/>
  </message>
  <message name="removeDNSByRecordIdResponse">
    <part name="parameters" element="tns:removeDNSByRecordIdResponse"/>
  </message>
  <message name="removeDNSByRecordIds">
    <part name="parameters" element="tns:removeDNSByRecordIds"/>
  </message>
  <message name="removeDNSByRecordIdsResponse">
    <part name="parameters" element="tns:removeDNSByRecordIdsResponse"/>
  </message>
  <message name="updateDNS">
    <part name="parameters" element="tns:updateDNS"/>
  </message>
  <message name="updateDNSResponse">
    <part name="parameters" element="tns:updateDNSResponse"/>
  </message>
  <message name="getTrustBundles">
    <part name="parameters" element="tns:getTrustBundles"/>
  </message>
  <message name="getTrustBundlesResponse">
    <part name="parameters" element="tns:getTrustBundlesResponse"/>
  </message>
  <message name="getTrustBundleByName">
    <part name="parameters" element="tns:getTrustBundleByName"/>
  </message>
  <message name="getTrustBundleByNameResponse">
    <part name="parameters" element="tns:getTrustBundleByNameResponse"/>
  </message>
  <message name="getTrustBundleById">
    <part name="parameters" element="tns:getTrustBundleById"/>
  </message>
  <message name="getTrustBundleByIdResponse">
    <part name="parameters" element="tns:getTrustBundleByIdResponse"/>
  </message>
  <message name="addTrustBundle">
    <part name="parameters" element="tns:addTrustBundle"/>
  </message>
  <message name="addTrustBundleResponse">
    <part name="parameters" element="tns:addTrustBundleResponse"/>
  </message>
  <message name="refreshTrustBundle">
    <part name="parameters" element="tns:refreshTrustBundle"/>
  </message>
  <message name="refreshTrustBundleResponse">
    <part name="parameters" element="tns:refreshTrustBundleResponse"/>
  </message>
  <message name="updateLastUpdateError">
    <part name="parameters" element="tns:updateLastUpdateError"/>
  </message>
  <message name="updateLastUpdateErrorResponse">
    <part name="parameters" element="tns:updateLastUpdateErrorResponse"/>
  </message>
  <message name="deleteTrustBundles">
    <part name="parameters" element="tns:deleteTrustBundles"/>
  </message>
  <message name="deleteTrustBundlesResponse">
    <part name="parameters" element="tns:deleteTrustBundlesResponse"/>
  </message>
  <message name="updateTrustBundleSigningCertificate">
    <part name="parameters" element="tns:updateTrustBundleSigningCertificate"/>
  </message>
  <message name="updateTrustBundleSigningCertificateResponse">
    <part name="parameters" element="tns:updateTrustBundleSigningCertificateResponse"/>
  </message>
  <message name="updateTrustBundleAttributes">
    <part name="parameters" element="tns:updateTrustBundleAttributes"/>
  </message>
  <message name="updateTrustBundleAttributesResponse">
    <part name="parameters" element="tns:updateTrustBundleAttributesResponse"/>
  </message>
  <message name="associateTrustBundleToDomain">
    <part name="parameters" element="tns:associateTrustBundleToDomain"/>
  </message>
  <message name="associateTrustBundleToDomainResponse">
    <part name="parameters" element="tns:associateTrustBundleToDomainResponse"/>
  </message>
  <message name="disassociateTrustBundleFromDomain">
    <part name="parameters" element="tns:disassociateTrustBundleFromDomain"/>
  </message>
  <message name="disassociateTrustBundleFromDomainResponse">
    <part name="parameters" element="tns:disassociateTrustBundleFromDomainResponse"/>
  </message>
  <message name="disassociateTrustBundlesFromDomain">
    <part name="parameters" element="tns:disassociateTrustBundlesFromDomain"/>
  </message>
  <message name="disassociateTrustBundlesFromDomainResponse">
    <part name="parameters" element="tns:disassociateTrustBundlesFromDomainResponse"/>
  </message>
  <message name="disassociateTrustBundleFromDomains">
    <part name="parameters" element="tns:disassociateTrustBundleFromDomains"/>
  </message>
  <message name="disassociateTrustBundleFromDomainsResponse">
    <part name="parameters" element="tns:disassociateTrustBundleFromDomainsResponse"/>
  </message>
  <message name="getTrustBundlesByDomain">
    <part name="parameters" element="tns:getTrustBundlesByDomain"/>
  </message>
  <message name="getTrustBundlesByDomainResponse">
    <part name="parameters" element="tns:getTrustBundlesByDomainResponse"/>
  </message>
  <message name="getPolicies">
    <part name="parameters" element="tns:getPolicies"/>
  </message>
  <message name="getPoliciesResponse">
    <part name="parameters" element="tns:getPoliciesResponse"/>
  </message>
  <message name="getPolicyByName">
    <part name="parameters" element="tns:getPolicyByName"/>
  </message>
  <message name="getPolicyByNameResponse">
    <part name="parameters" element="tns:getPolicyByNameResponse"/>
  </message>
  <message name="getPolicyById">
    <part name="parameters" element="tns:getPolicyById"/>
  </message>
  <message name="getPolicyByIdResponse">
    <part name="parameters" element="tns:getPolicyByIdResponse"/>
  </message>
  <message name="addPolicy">
    <part name="parameters" element="tns:addPolicy"/>
  </message>
  <message name="addPolicyResponse">
    <part name="parameters" element="tns:addPolicyResponse"/>
  </message>
  <message name="deletePolicies">
    <part name="parameters" element="tns:deletePolicies"/>
  </message>
  <message name="deletePoliciesResponse">
    <part name="parameters" element="tns:deletePoliciesResponse"/>
  </message>
  <message name="updatePolicyAttributes">
    <part name="parameters" element="tns:updatePolicyAttributes"/>
  </message>
  <message name="updatePolicyAttributesResponse">
    <part name="parameters" element="tns:updatePolicyAttributesResponse"/>
  </message>
  <message name="getPolicyGroups">
    <part name="parameters" element="tns:getPolicyGroups"/>
  </message>
  <message name="getPolicyGroupsResponse">
    <part name="parameters" element="tns:getPolicyGroupsResponse"/>
  </message>
  <message name="getPolicyGroupByName">
    <part name="parameters" element="tns:getPolicyGroupByName"/>
  </message>
  <message name="getPolicyGroupByNameResponse">
    <part name="parameters" element="tns:getPolicyGroupByNameResponse"/>
  </message>
  <message name="getPolicyGroupById">
    <part name="parameters" element="tns:getPolicyGroupById"/>
  </message>
  <message name="getPolicyGroupByIdResponse">
    <part name="parameters" element="tns:getPolicyGroupByIdResponse"/>
  </message>
  <message name="addPolicyGroup">
    <part name="parameters" element="tns:addPolicyGroup"/>
  </message>
  <message name="addPolicyGroupResponse">
    <part name="parameters" element="tns:addPolicyGroupResponse"/>
  </message>
  <message name="deletePolicyGroups">
    <part name="parameters" element="tns:deletePolicyGroups"/>
  </message>
  <message name="deletePolicyGroupsResponse">
    <part name="parameters" element="tns:deletePolicyGroupsResponse"/>
  </message>
  <message name="updateGroupAttributes">
    <part name="parameters" element="tns:updateGroupAttributes"/>
  </message>
  <message name="updateGroupAttributesResponse">
    <part name="parameters" element="tns:updateGroupAttributesResponse"/>
  </message>
  <message name="addPolicyUseToGroup">
    <part name="parameters" element="tns:addPolicyUseToGroup"/>
  </message>
  <message name="addPolicyUseToGroupResponse">
    <part name="parameters" element="tns:addPolicyUseToGroupResponse"/>
  </message>
  <message name="removePolicyUseFromGroup">
    <part name="parameters" element="tns:removePolicyUseFromGroup"/>
  </message>
  <message name="removePolicyUseFromGroupResponse">
    <part name="parameters" element="tns:removePolicyUseFromGroupResponse"/>
  </message>
  <message name="associatePolicyGroupToDomain">
    <part name="parameters" element="tns:associatePolicyGroupToDomain"/>
  </message>
  <message name="associatePolicyGroupToDomainResponse">
    <part name="parameters" element="tns:associatePolicyGroupToDomainResponse"/>
  </message>
  <message name="disassociatePolicyGroupFromDomain">
    <part name="parameters" element="tns:disassociatePolicyGroupFromDomain"/>
  </message>
  <message name="disassociatePolicyGroupFromDomainResponse">
    <part name="parameters" element="tns:disassociatePolicyGroupFromDomainResponse"/>
  </message>
  <message name="disassociatePolicyGroupsFromDomain">
    <part name="parameters" element="tns:disassociatePolicyGroupsFromDomain"/>
  </message>
  <message name="disassociatePolicyGroupsFromDomainResponse">
    <part name="parameters" element="tns:disassociatePolicyGroupsFromDomainResponse"/>
  </message>
  <message name="disassociatePolicyGroupFromDomains">
    <part name="parameters" element="tns:disassociatePolicyGroupFromDomains"/>
  </message>
  <message name="disassociatePolicyGroupFromDomainsResponse">
    <part name="parameters" element="tns:disassociatePolicyGroupFromDomainsResponse"/>
  </message>
  <message name="getPolicyGroupDomainReltns">
    <part name="parameters" element="tns:getPolicyGroupDomainReltns"/>
  </message>
  <message name="getPolicyGroupDomainReltnsResponse">
    <part name="parameters" element="tns:getPolicyGroupDomainReltnsResponse"/>
  </message>
  <message name="getPolicyGroupsByDomain">
    <part name="parameters" element="tns:getPolicyGroupsByDomain"/>
  </message>
  <message name="getPolicyGroupsByDomainResponse">
    <part name="parameters" element="tns:getPolicyGroupsByDomainResponse"/>
  </message>
  <portType name="ConfigurationService">
    <operation name="getAddresss">
      <input message="tns:getAddresss"/>
      <output message="tns:getAddresssResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addAddress">
      <input message="tns:addAddress"/>
      <output message="tns:addAddressResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateAddress">
      <input message="tns:updateAddress"/>
      <output message="tns:updateAddressResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getAddressCount">
      <input message="tns:getAddressCount"/>
      <output message="tns:getAddressCountResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeAddress">
      <input message="tns:removeAddress"/>
      <output message="tns:removeAddressResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="listAddresss">
      <input message="tns:listAddresss"/>
      <output message="tns:listAddresssResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addDomain">
      <input message="tns:addDomain"/>
      <output message="tns:addDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateDomain">
      <input message="tns:updateDomain"/>
      <output message="tns:updateDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDomainCount">
      <input message="tns:getDomainCount"/>
      <output message="tns:getDomainCountResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDomains">
      <input message="tns:getDomains"/>
      <output message="tns:getDomainsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeDomain">
      <input message="tns:removeDomain"/>
      <output message="tns:removeDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeDomainById">
      <input message="tns:removeDomainById"/>
      <output message="tns:removeDomainByIdResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="listDomains">
      <input message="tns:listDomains"/>
      <output message="tns:listDomainsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="searchDomain">
      <input message="tns:searchDomain"/>
      <output message="tns:searchDomainResponse"/>
    </operation>
    <operation name="getDomain">
      <input message="tns:getDomain"/>
      <output message="tns:getDomainResponse"/>
    </operation>
    <operation name="contains">
      <input message="tns:contains"/>
      <output message="tns:containsResponse"/>
    </operation>
    <operation name="getCertificates">
      <input message="tns:getCertificates"/>
      <output message="tns:getCertificatesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addCertificates">
      <input message="tns:addCertificates"/>
      <output message="tns:addCertificatesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="setCertificateStatus">
      <input message="tns:setCertificateStatus"/>
      <output message="tns:setCertificateStatusResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="setCertificateStatusForOwner">
      <input message="tns:setCertificateStatusForOwner"/>
      <output message="tns:setCertificateStatusForOwnerResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeCertificates">
      <input message="tns:removeCertificates"/>
      <output message="tns:removeCertificatesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeCertificatesForOwner">
      <input message="tns:removeCertificatesForOwner"/>
      <output message="tns:removeCertificatesForOwnerResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getCertificate">
      <input message="tns:getCertificate"/>
      <output message="tns:getCertificateResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getCertificatesForOwner">
      <input message="tns:getCertificatesForOwner"/>
      <output message="tns:getCertificatesForOwnerResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="listCertificates">
      <input message="tns:listCertificates"/>
      <output message="tns:listCertificatesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addAnchor">
      <input message="tns:addAnchor"/>
      <output message="tns:addAnchorResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="setAnchorStatusForOwner">
      <input message="tns:setAnchorStatusForOwner"/>
      <output message="tns:setAnchorStatusForOwnerResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeAnchors">
      <input message="tns:removeAnchors"/>
      <output message="tns:removeAnchorsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeAnchorsForOwner">
      <input message="tns:removeAnchorsForOwner"/>
      <output message="tns:removeAnchorsForOwnerResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getAnchor">
      <input message="tns:getAnchor"/>
      <output message="tns:getAnchorResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getAnchors">
      <input message="tns:getAnchors"/>
      <output message="tns:getAnchorsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getAnchorsForOwner">
      <input message="tns:getAnchorsForOwner"/>
      <output message="tns:getAnchorsForOwnerResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getIncomingAnchors">
      <input message="tns:getIncomingAnchors"/>
      <output message="tns:getIncomingAnchorsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getOutgoingAnchors">
      <input message="tns:getOutgoingAnchors"/>
      <output message="tns:getOutgoingAnchorsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="listAnchors">
      <input message="tns:listAnchors"/>
      <output message="tns:listAnchorsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addSetting">
      <input message="tns:addSetting"/>
      <output message="tns:addSettingResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getAllSettings">
      <input message="tns:getAllSettings"/>
      <output message="tns:getAllSettingsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getSettingByName">
      <input message="tns:getSettingByName"/>
      <output message="tns:getSettingByNameResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getSettingsByNames">
      <input message="tns:getSettingsByNames"/>
      <output message="tns:getSettingsByNamesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateSetting">
      <input message="tns:updateSetting"/>
      <output message="tns:updateSettingResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="deleteSetting">
      <input message="tns:deleteSetting"/>
      <output message="tns:deleteSettingResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addDNS">
      <input message="tns:addDNS"/>
      <output message="tns:addDNSResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDNSByName">
      <input message="tns:getDNSByName"/>
      <output message="tns:getDNSByNameResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDNSByNameAndType">
      <input message="tns:getDNSByNameAndType"/>
      <output message="tns:getDNSByNameAndTypeResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDNSByRecordId">
      <input message="tns:getDNSByRecordId"/>
      <output message="tns:getDNSByRecordIdResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDNSByRecordIds">
      <input message="tns:getDNSByRecordIds"/>
      <output message="tns:getDNSByRecordIdsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDNSByType">
      <input message="tns:getDNSByType"/>
      <output message="tns:getDNSByTypeResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getDNSCount">
      <input message="tns:getDNSCount"/>
      <output message="tns:getDNSCountResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeDNS">
      <input message="tns:removeDNS"/>
      <output message="tns:removeDNSResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeDNSByRecordId">
      <input message="tns:removeDNSByRecordId"/>
      <output message="tns:removeDNSByRecordIdResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removeDNSByRecordIds">
      <input message="tns:removeDNSByRecordIds"/>
      <output message="tns:removeDNSByRecordIdsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateDNS">
      <input message="tns:updateDNS"/>
      <output message="tns:updateDNSResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getTrustBundles">
      <input message="tns:getTrustBundles"/>
      <output message="tns:getTrustBundlesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getTrustBundleByName">
      <input message="tns:getTrustBundleByName"/>
      <output message="tns:getTrustBundleByNameResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getTrustBundleById">
      <input message="tns:getTrustBundleById"/>
      <output message="tns:getTrustBundleByIdResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addTrustBundle">
      <input message="tns:addTrustBundle"/>
      <output message="tns:addTrustBundleResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="refreshTrustBundle">
      <input message="tns:refreshTrustBundle"/>
      <output message="tns:refreshTrustBundleResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateLastUpdateError">
      <input message="tns:updateLastUpdateError"/>
      <output message="tns:updateLastUpdateErrorResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="deleteTrustBundles">
      <input message="tns:deleteTrustBundles"/>
      <output message="tns:deleteTrustBundlesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateTrustBundleSigningCertificate">
      <input message="tns:updateTrustBundleSigningCertificate"/>
      <output message="tns:updateTrustBundleSigningCertificateResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateTrustBundleAttributes">
      <input message="tns:updateTrustBundleAttributes"/>
      <output message="tns:updateTrustBundleAttributesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="associateTrustBundleToDomain">
      <input message="tns:associateTrustBundleToDomain"/>
      <output message="tns:associateTrustBundleToDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="disassociateTrustBundleFromDomain">
      <input message="tns:disassociateTrustBundleFromDomain"/>
      <output message="tns:disassociateTrustBundleFromDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="disassociateTrustBundlesFromDomain">
      <input message="tns:disassociateTrustBundlesFromDomain"/>
      <output message="tns:disassociateTrustBundlesFromDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="disassociateTrustBundleFromDomains">
      <input message="tns:disassociateTrustBundleFromDomains"/>
      <output message="tns:disassociateTrustBundleFromDomainsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getTrustBundlesByDomain">
      <input message="tns:getTrustBundlesByDomain"/>
      <output message="tns:getTrustBundlesByDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicies">
      <input message="tns:getPolicies"/>
      <output message="tns:getPoliciesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicyByName">
      <input message="tns:getPolicyByName"/>
      <output message="tns:getPolicyByNameResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicyById">
      <input message="tns:getPolicyById"/>
      <output message="tns:getPolicyByIdResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addPolicy">
      <input message="tns:addPolicy"/>
      <output message="tns:addPolicyResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="deletePolicies">
      <input message="tns:deletePolicies"/>
      <output message="tns:deletePoliciesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updatePolicyAttributes">
      <input message="tns:updatePolicyAttributes"/>
      <output message="tns:updatePolicyAttributesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicyGroups">
      <input message="tns:getPolicyGroups"/>
      <output message="tns:getPolicyGroupsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicyGroupByName">
      <input message="tns:getPolicyGroupByName"/>
      <output message="tns:getPolicyGroupByNameResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicyGroupById">
      <input message="tns:getPolicyGroupById"/>
      <output message="tns:getPolicyGroupByIdResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addPolicyGroup">
      <input message="tns:addPolicyGroup"/>
      <output message="tns:addPolicyGroupResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="deletePolicyGroups">
      <input message="tns:deletePolicyGroups"/>
      <output message="tns:deletePolicyGroupsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="updateGroupAttributes">
      <input message="tns:updateGroupAttributes"/>
      <output message="tns:updateGroupAttributesResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="addPolicyUseToGroup">
      <input message="tns:addPolicyUseToGroup"/>
      <output message="tns:addPolicyUseToGroupResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="removePolicyUseFromGroup">
      <input message="tns:removePolicyUseFromGroup"/>
      <output message="tns:removePolicyUseFromGroupResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="associatePolicyGroupToDomain">
      <input message="tns:associatePolicyGroupToDomain"/>
      <output message="tns:associatePolicyGroupToDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="disassociatePolicyGroupFromDomain">
      <input message="tns:disassociatePolicyGroupFromDomain"/>
      <output message="tns:disassociatePolicyGroupFromDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="disassociatePolicyGroupsFromDomain">
      <input message="tns:disassociatePolicyGroupsFromDomain"/>
      <output message="tns:disassociatePolicyGroupsFromDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="disassociatePolicyGroupFromDomains">
      <input message="tns:disassociatePolicyGroupFromDomains"/>
      <output message="tns:disassociatePolicyGroupFromDomainsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicyGroupDomainReltns">
      <input message="tns:getPolicyGroupDomainReltns"/>
      <output message="tns:getPolicyGroupDomainReltnsResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
    <operation name="getPolicyGroupsByDomain">
      <input message="tns:getPolicyGroupsByDomain"/>
      <output message="tns:getPolicyGroupsByDomainResponse"/>
      <fault message="tns:ConfigurationServiceException" name="ConfigurationServiceException"/>
    </operation>
  </portType>
</definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>..\..\..\wsdl\ConfigurationService_schema1.xsd</con:url><con:content><![CDATA[<xs:schema version="1.0" targetNamespace="http://nhind.org/config" xmlns:tns="http://nhind.org/config" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="ConfigurationServiceException" type="tns:ConfigurationServiceException"/>
  <xs:element name="addAddress" type="tns:addAddress"/>
  <xs:element name="addAddressResponse" type="tns:addAddressResponse"/>
  <xs:element name="addAnchor" type="tns:addAnchor"/>
  <xs:element name="addAnchorResponse" type="tns:addAnchorResponse"/>
  <xs:element name="addCertificates" type="tns:addCertificates"/>
  <xs:element name="addCertificatesResponse" type="tns:addCertificatesResponse"/>
  <xs:element name="addDNS" type="tns:addDNS"/>
  <xs:element name="addDNSResponse" type="tns:addDNSResponse"/>
  <xs:element name="addDomain" type="tns:addDomain"/>
  <xs:element name="addDomainResponse" type="tns:addDomainResponse"/>
  <xs:element name="addPolicy" type="tns:addPolicy"/>
  <xs:element name="addPolicyGroup" type="tns:addPolicyGroup"/>
  <xs:element name="addPolicyGroupResponse" type="tns:addPolicyGroupResponse"/>
  <xs:element name="addPolicyResponse" type="tns:addPolicyResponse"/>
  <xs:element name="addPolicyUseToGroup" type="tns:addPolicyUseToGroup"/>
  <xs:element name="addPolicyUseToGroupResponse" type="tns:addPolicyUseToGroupResponse"/>
  <xs:element name="addSetting" type="tns:addSetting"/>
  <xs:element name="addSettingResponse" type="tns:addSettingResponse"/>
  <xs:element name="addTrustBundle" type="tns:addTrustBundle"/>
  <xs:element name="addTrustBundleResponse" type="tns:addTrustBundleResponse"/>
  <xs:element name="associatePolicyGroupToDomain" type="tns:associatePolicyGroupToDomain"/>
  <xs:element name="associatePolicyGroupToDomainResponse" type="tns:associatePolicyGroupToDomainResponse"/>
  <xs:element name="associateTrustBundleToDomain" type="tns:associateTrustBundleToDomain"/>
  <xs:element name="associateTrustBundleToDomainResponse" type="tns:associateTrustBundleToDomainResponse"/>
  <xs:element name="contains" type="tns:contains"/>
  <xs:element name="containsResponse" type="tns:containsResponse"/>
  <xs:element name="deletePolicies" type="tns:deletePolicies"/>
  <xs:element name="deletePoliciesResponse" type="tns:deletePoliciesResponse"/>
  <xs:element name="deletePolicyGroups" type="tns:deletePolicyGroups"/>
  <xs:element name="deletePolicyGroupsResponse" type="tns:deletePolicyGroupsResponse"/>
  <xs:element name="deleteSetting" type="tns:deleteSetting"/>
  <xs:element name="deleteSettingResponse" type="tns:deleteSettingResponse"/>
  <xs:element name="deleteTrustBundles" type="tns:deleteTrustBundles"/>
  <xs:element name="deleteTrustBundlesResponse" type="tns:deleteTrustBundlesResponse"/>
  <xs:element name="disassociatePolicyGroupFromDomain" type="tns:disassociatePolicyGroupFromDomain"/>
  <xs:element name="disassociatePolicyGroupFromDomainResponse" type="tns:disassociatePolicyGroupFromDomainResponse"/>
  <xs:element name="disassociatePolicyGroupFromDomains" type="tns:disassociatePolicyGroupFromDomains"/>
  <xs:element name="disassociatePolicyGroupFromDomainsResponse" type="tns:disassociatePolicyGroupFromDomainsResponse"/>
  <xs:element name="disassociatePolicyGroupsFromDomain" type="tns:disassociatePolicyGroupsFromDomain"/>
  <xs:element name="disassociatePolicyGroupsFromDomainResponse" type="tns:disassociatePolicyGroupsFromDomainResponse"/>
  <xs:element name="disassociateTrustBundleFromDomain" type="tns:disassociateTrustBundleFromDomain"/>
  <xs:element name="disassociateTrustBundleFromDomainResponse" type="tns:disassociateTrustBundleFromDomainResponse"/>
  <xs:element name="disassociateTrustBundleFromDomains" type="tns:disassociateTrustBundleFromDomains"/>
  <xs:element name="disassociateTrustBundleFromDomainsResponse" type="tns:disassociateTrustBundleFromDomainsResponse"/>
  <xs:element name="disassociateTrustBundlesFromDomain" type="tns:disassociateTrustBundlesFromDomain"/>
  <xs:element name="disassociateTrustBundlesFromDomainResponse" type="tns:disassociateTrustBundlesFromDomainResponse"/>
  <xs:element name="domain" type="tns:domain"/>
  <xs:element name="getAddressCount" type="tns:getAddressCount"/>
  <xs:element name="getAddressCountResponse" type="tns:getAddressCountResponse"/>
  <xs:element name="getAddresss" type="tns:getAddresss"/>
  <xs:element name="getAddresssResponse" type="tns:getAddresssResponse"/>
  <xs:element name="getAllSettings" type="tns:getAllSettings"/>
  <xs:element name="getAllSettingsResponse" type="tns:getAllSettingsResponse"/>
  <xs:element name="getAnchor" type="tns:getAnchor"/>
  <xs:element name="getAnchorResponse" type="tns:getAnchorResponse"/>
  <xs:element name="getAnchors" type="tns:getAnchors"/>
  <xs:element name="getAnchorsForOwner" type="tns:getAnchorsForOwner"/>
  <xs:element name="getAnchorsForOwnerResponse" type="tns:getAnchorsForOwnerResponse"/>
  <xs:element name="getAnchorsResponse" type="tns:getAnchorsResponse"/>
  <xs:element name="getCertificate" type="tns:getCertificate"/>
  <xs:element name="getCertificateResponse" type="tns:getCertificateResponse"/>
  <xs:element name="getCertificates" type="tns:getCertificates"/>
  <xs:element name="getCertificatesForOwner" type="tns:getCertificatesForOwner"/>
  <xs:element name="getCertificatesForOwnerResponse" type="tns:getCertificatesForOwnerResponse"/>
  <xs:element name="getCertificatesResponse" type="tns:getCertificatesResponse"/>
  <xs:element name="getDNSByName" type="tns:getDNSByName"/>
  <xs:element name="getDNSByNameAndType" type="tns:getDNSByNameAndType"/>
  <xs:element name="getDNSByNameAndTypeResponse" type="tns:getDNSByNameAndTypeResponse"/>
  <xs:element name="getDNSByNameResponse" type="tns:getDNSByNameResponse"/>
  <xs:element name="getDNSByRecordId" type="tns:getDNSByRecordId"/>
  <xs:element name="getDNSByRecordIdResponse" type="tns:getDNSByRecordIdResponse"/>
  <xs:element name="getDNSByRecordIds" type="tns:getDNSByRecordIds"/>
  <xs:element name="getDNSByRecordIdsResponse" type="tns:getDNSByRecordIdsResponse"/>
  <xs:element name="getDNSByType" type="tns:getDNSByType"/>
  <xs:element name="getDNSByTypeResponse" type="tns:getDNSByTypeResponse"/>
  <xs:element name="getDNSCount" type="tns:getDNSCount"/>
  <xs:element name="getDNSCountResponse" type="tns:getDNSCountResponse"/>
  <xs:element name="getDomain" type="tns:getDomain"/>
  <xs:element name="getDomainCount" type="tns:getDomainCount"/>
  <xs:element name="getDomainCountResponse" type="tns:getDomainCountResponse"/>
  <xs:element name="getDomainResponse" type="tns:getDomainResponse"/>
  <xs:element name="getDomains" type="tns:getDomains"/>
  <xs:element name="getDomainsResponse" type="tns:getDomainsResponse"/>
  <xs:element name="getIncomingAnchors" type="tns:getIncomingAnchors"/>
  <xs:element name="getIncomingAnchorsResponse" type="tns:getIncomingAnchorsResponse"/>
  <xs:element name="getOutgoingAnchors" type="tns:getOutgoingAnchors"/>
  <xs:element name="getOutgoingAnchorsResponse" type="tns:getOutgoingAnchorsResponse"/>
  <xs:element name="getPolicies" type="tns:getPolicies"/>
  <xs:element name="getPoliciesResponse" type="tns:getPoliciesResponse"/>
  <xs:element name="getPolicyById" type="tns:getPolicyById"/>
  <xs:element name="getPolicyByIdResponse" type="tns:getPolicyByIdResponse"/>
  <xs:element name="getPolicyByName" type="tns:getPolicyByName"/>
  <xs:element name="getPolicyByNameResponse" type="tns:getPolicyByNameResponse"/>
  <xs:element name="getPolicyGroupById" type="tns:getPolicyGroupById"/>
  <xs:element name="getPolicyGroupByIdResponse" type="tns:getPolicyGroupByIdResponse"/>
  <xs:element name="getPolicyGroupByName" type="tns:getPolicyGroupByName"/>
  <xs:element name="getPolicyGroupByNameResponse" type="tns:getPolicyGroupByNameResponse"/>
  <xs:element name="getPolicyGroupDomainReltns" type="tns:getPolicyGroupDomainReltns"/>
  <xs:element name="getPolicyGroupDomainReltnsResponse" type="tns:getPolicyGroupDomainReltnsResponse"/>
  <xs:element name="getPolicyGroups" type="tns:getPolicyGroups"/>
  <xs:element name="getPolicyGroupsByDomain" type="tns:getPolicyGroupsByDomain"/>
  <xs:element name="getPolicyGroupsByDomainResponse" type="tns:getPolicyGroupsByDomainResponse"/>
  <xs:element name="getPolicyGroupsResponse" type="tns:getPolicyGroupsResponse"/>
  <xs:element name="getSettingByName" type="tns:getSettingByName"/>
  <xs:element name="getSettingByNameResponse" type="tns:getSettingByNameResponse"/>
  <xs:element name="getSettingsByNames" type="tns:getSettingsByNames"/>
  <xs:element name="getSettingsByNamesResponse" type="tns:getSettingsByNamesResponse"/>
  <xs:element name="getTrustBundleById" type="tns:getTrustBundleById"/>
  <xs:element name="getTrustBundleByIdResponse" type="tns:getTrustBundleByIdResponse"/>
  <xs:element name="getTrustBundleByName" type="tns:getTrustBundleByName"/>
  <xs:element name="getTrustBundleByNameResponse" type="tns:getTrustBundleByNameResponse"/>
  <xs:element name="getTrustBundles" type="tns:getTrustBundles"/>
  <xs:element name="getTrustBundlesByDomain" type="tns:getTrustBundlesByDomain"/>
  <xs:element name="getTrustBundlesByDomainResponse" type="tns:getTrustBundlesByDomainResponse"/>
  <xs:element name="getTrustBundlesResponse" type="tns:getTrustBundlesResponse"/>
  <xs:element name="listAddresss" type="tns:listAddresss"/>
  <xs:element name="listAddresssResponse" type="tns:listAddresssResponse"/>
  <xs:element name="listAnchors" type="tns:listAnchors"/>
  <xs:element name="listAnchorsResponse" type="tns:listAnchorsResponse"/>
  <xs:element name="listCertificates" type="tns:listCertificates"/>
  <xs:element name="listCertificatesResponse" type="tns:listCertificatesResponse"/>
  <xs:element name="listDomains" type="tns:listDomains"/>
  <xs:element name="listDomainsResponse" type="tns:listDomainsResponse"/>
  <xs:element name="refreshTrustBundle" type="tns:refreshTrustBundle"/>
  <xs:element name="refreshTrustBundleResponse" type="tns:refreshTrustBundleResponse"/>
  <xs:element name="removeAddress" type="tns:removeAddress"/>
  <xs:element name="removeAddressResponse" type="tns:removeAddressResponse"/>
  <xs:element name="removeAnchors" type="tns:removeAnchors"/>
  <xs:element name="removeAnchorsForOwner" type="tns:removeAnchorsForOwner"/>
  <xs:element name="removeAnchorsForOwnerResponse" type="tns:removeAnchorsForOwnerResponse"/>
  <xs:element name="removeAnchorsResponse" type="tns:removeAnchorsResponse"/>
  <xs:element name="removeCertificates" type="tns:removeCertificates"/>
  <xs:element name="removeCertificatesForOwner" type="tns:removeCertificatesForOwner"/>
  <xs:element name="removeCertificatesForOwnerResponse" type="tns:removeCertificatesForOwnerResponse"/>
  <xs:element name="removeCertificatesResponse" type="tns:removeCertificatesResponse"/>
  <xs:element name="removeDNS" type="tns:removeDNS"/>
  <xs:element name="removeDNSByRecordId" type="tns:removeDNSByRecordId"/>
  <xs:element name="removeDNSByRecordIdResponse" type="tns:removeDNSByRecordIdResponse"/>
  <xs:element name="removeDNSByRecordIds" type="tns:removeDNSByRecordIds"/>
  <xs:element name="removeDNSByRecordIdsResponse" type="tns:removeDNSByRecordIdsResponse"/>
  <xs:element name="removeDNSResponse" type="tns:removeDNSResponse"/>
  <xs:element name="removeDomain" type="tns:removeDomain"/>
  <xs:element name="removeDomainById" type="tns:removeDomainById"/>
  <xs:element name="removeDomainByIdResponse" type="tns:removeDomainByIdResponse"/>
  <xs:element name="removeDomainResponse" type="tns:removeDomainResponse"/>
  <xs:element name="removePolicyUseFromGroup" type="tns:removePolicyUseFromGroup"/>
  <xs:element name="removePolicyUseFromGroupResponse" type="tns:removePolicyUseFromGroupResponse"/>
  <xs:element name="searchDomain" type="tns:searchDomain"/>
  <xs:element name="searchDomainResponse" type="tns:searchDomainResponse"/>
  <xs:element name="setAnchorStatusForOwner" type="tns:setAnchorStatusForOwner"/>
  <xs:element name="setAnchorStatusForOwnerResponse" type="tns:setAnchorStatusForOwnerResponse"/>
  <xs:element name="setCertificateStatus" type="tns:setCertificateStatus"/>
  <xs:element name="setCertificateStatusForOwner" type="tns:setCertificateStatusForOwner"/>
  <xs:element name="setCertificateStatusForOwnerResponse" type="tns:setCertificateStatusForOwnerResponse"/>
  <xs:element name="setCertificateStatusResponse" type="tns:setCertificateStatusResponse"/>
  <xs:element name="updateAddress" type="tns:updateAddress"/>
  <xs:element name="updateAddressResponse" type="tns:updateAddressResponse"/>
  <xs:element name="updateDNS" type="tns:updateDNS"/>
  <xs:element name="updateDNSResponse" type="tns:updateDNSResponse"/>
  <xs:element name="updateDomain" type="tns:updateDomain"/>
  <xs:element name="updateDomainResponse" type="tns:updateDomainResponse"/>
  <xs:element name="updateGroupAttributes" type="tns:updateGroupAttributes"/>
  <xs:element name="updateGroupAttributesResponse" type="tns:updateGroupAttributesResponse"/>
  <xs:element name="updateLastUpdateError" type="tns:updateLastUpdateError"/>
  <xs:element name="updateLastUpdateErrorResponse" type="tns:updateLastUpdateErrorResponse"/>
  <xs:element name="updatePolicyAttributes" type="tns:updatePolicyAttributes"/>
  <xs:element name="updatePolicyAttributesResponse" type="tns:updatePolicyAttributesResponse"/>
  <xs:element name="updateSetting" type="tns:updateSetting"/>
  <xs:element name="updateSettingResponse" type="tns:updateSettingResponse"/>
  <xs:element name="updateTrustBundleAttributes" type="tns:updateTrustBundleAttributes"/>
  <xs:element name="updateTrustBundleAttributesResponse" type="tns:updateTrustBundleAttributesResponse"/>
  <xs:element name="updateTrustBundleSigningCertificate" type="tns:updateTrustBundleSigningCertificate"/>
  <xs:element name="updateTrustBundleSigningCertificateResponse" type="tns:updateTrustBundleSigningCertificateResponse"/>
  <xs:complexType name="getDNSByRecordId">
    <xs:sequence>
      <xs:element name="recordId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDNSByRecordIdResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:dnsRecord" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="dnsRecord">
    <xs:sequence>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="data" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="dclass" type="xs:int"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="ttl" type="xs:long"/>
      <xs:element name="type" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ConfigurationServiceException">
    <xs:sequence>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
      <xs:element name="suppressed" type="tns:throwable" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="throwable">
    <xs:sequence>
      <xs:element name="stackTrace" type="tns:stackTraceElement" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="stackTraceElement" final="extension restriction">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getAnchor">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="thumbprint" type="xs:string" minOccurs="0"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certificateGetOptions">
    <xs:sequence>
      <xs:element name="includeData" type="xs:boolean"/>
      <xs:element name="includePrivateKey" type="xs:boolean"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAnchorResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:anchor" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="anchor">
    <xs:sequence>
      <xs:element name="certificateId" type="xs:long"/>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="data" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="incoming" type="xs:boolean"/>
      <xs:element name="outgoing" type="xs:boolean"/>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
      <xs:element name="thumbprint" type="xs:string" minOccurs="0"/>
      <xs:element name="validEndDate" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="validStartDate" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociatePolicyGroupsFromDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociatePolicyGroupsFromDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getCertificate">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="thumbprint" type="xs:string" minOccurs="0"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getCertificateResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certificate" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certificate">
    <xs:sequence>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="data" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="privateKey" type="xs:boolean"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
      <xs:element name="validEndDate" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="validStartDate" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateTrustBundleSigningCertificate">
    <xs:sequence>
      <xs:element name="trustBundleIds" type="xs:long"/>
      <xs:element name="signingCert" type="tns:certificate" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateTrustBundleSigningCertificateResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removeDNSByRecordIds">
    <xs:sequence>
      <xs:element name="recordIds" type="xs:long" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeDNSByRecordIdsResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="deleteSetting">
    <xs:sequence>
      <xs:element name="names" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="deleteSettingResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="deletePolicyGroups">
    <xs:sequence>
      <xs:element name="policyGroupIds" type="xs:long" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="deletePolicyGroupsResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removeDomainById">
    <xs:sequence>
      <xs:element name="id" type="xs:long" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeDomainByIdResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getSettingByName">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSettingByNameResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:setting" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setting">
    <xs:sequence>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
      <xs:element name="updateTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="value" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPolicies">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPoliciesResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicy" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certPolicy">
    <xs:sequence>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="policyData" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="policyName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="lexicon" type="tns:policyLexicon"/>
  </xs:complexType>
  <xs:complexType name="getAllSettings">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getAllSettingsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:setting" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="searchDomain">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="searchDomainResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:domain" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="domain">
    <xs:sequence>
      <xs:element name="address" type="tns:address" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="domainName" type="xs:string" minOccurs="0"/>
      <xs:element name="postMasterEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="postmasterAddressId" type="xs:long" minOccurs="0"/>
      <xs:element name="updateTime" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:long"/>
    <xs:attribute name="status" type="tns:entityStatus"/>
  </xs:complexType>
  <xs:complexType name="address">
    <xs:sequence>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="emailAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="endpoint" type="xs:string" minOccurs="0"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
      <xs:element name="type" type="xs:string" minOccurs="0"/>
      <xs:element name="updateTime" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="id" type="xs:long"/>
  </xs:complexType>
  <xs:complexType name="addAddress">
    <xs:sequence>
      <xs:element name="address" type="tns:address" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addAddressResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getDomains">
    <xs:sequence>
      <xs:element name="names" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDomainsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:domain" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDNSByName">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDNSByNameResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:dnsRecord" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="listAnchors">
    <xs:sequence>
      <xs:element name="lastAnchorId" type="xs:long" minOccurs="0"/>
      <xs:element name="maxResults" type="xs:int"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="listAnchorsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:anchor" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAddressCount">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getAddressCountResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addSetting">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="value" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addSettingResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removeCertificates">
    <xs:sequence>
      <xs:element name="certificateIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeCertificatesResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="updateLastUpdateError">
    <xs:sequence>
      <xs:element name="trustBundleId" type="xs:long"/>
      <xs:element name="attemptTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="error" type="tns:bundleRefreshError" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateLastUpdateErrorResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getCertificatesForOwner">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getCertificatesForOwnerResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certificate" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociatePolicyGroupFromDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
      <xs:element name="policyGroupId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociatePolicyGroupFromDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="setCertificateStatusForOwner">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setCertificateStatusForOwnerResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="deleteTrustBundles">
    <xs:sequence>
      <xs:element name="trustBundleIds" type="xs:long" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="deleteTrustBundlesResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="listDomains">
    <xs:sequence>
      <xs:element name="names" type="xs:string" minOccurs="0"/>
      <xs:element name="maxResults" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="listDomainsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:domain" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getTrustBundleById">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getTrustBundleByIdResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:trustBundle" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="trustBundle">
    <xs:sequence>
      <xs:element name="bundleName" type="xs:string" minOccurs="0"/>
      <xs:element name="bundleURL" type="xs:string" minOccurs="0"/>
      <xs:element name="checkSum" type="xs:string" minOccurs="0"/>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="lastRefreshAttempt" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="lastRefreshError" type="tns:bundleRefreshError" minOccurs="0"/>
      <xs:element name="lastSuccessfulRefresh" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="refreshInterval" type="xs:int"/>
      <xs:element name="signingCertificateData" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="trustBundleAnchors" type="tns:trustBundleAnchor" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="trustBundleAnchor">
    <xs:sequence>
      <xs:element name="data" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="thumbprint" type="xs:string" minOccurs="0"/>
      <xs:element name="validEndDate" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="validStartDate" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSettingsByNames">
    <xs:sequence>
      <xs:element name="names" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getSettingsByNamesResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:setting" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateTrustBundleAttributes">
    <xs:sequence>
      <xs:element name="trustBundleId" type="xs:long"/>
      <xs:element name="trustBundleName" type="xs:string" minOccurs="0"/>
      <xs:element name="trustBundleURL" type="xs:string" minOccurs="0"/>
      <xs:element name="signingCert" type="tns:certificate" minOccurs="0"/>
      <xs:element name="trustBundleRefreshInterval" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateTrustBundleAttributesResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getDNSCount">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getDNSCountResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeCertificatesForOwner">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeCertificatesForOwnerResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupById">
    <xs:sequence>
      <xs:element name="policyGroupId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupByIdResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicyGroup" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certPolicyGroup">
    <xs:sequence>
      <xs:element name="certPolicyGroupReltn" type="tns:certPolicyGroupReltn" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="createTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="policyGroupName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certPolicyGroupReltn">
    <xs:sequence>
      <xs:element name="certPolicy" type="tns:certPolicy" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="incoming" type="xs:boolean"/>
      <xs:element name="outgoing" type="xs:boolean"/>
    </xs:sequence>
    <xs:attribute name="policyUse" type="tns:certPolicyUse"/>
  </xs:complexType>
  <xs:complexType name="getPolicyByName">
    <xs:sequence>
      <xs:element name="policyName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPolicyByNameResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicy" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeAnchorsForOwner">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeAnchorsForOwnerResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getDNSByNameAndType">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="type" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDNSByNameAndTypeResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:dnsRecord" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateAddress">
    <xs:sequence>
      <xs:element name="address" type="tns:address" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateAddressResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="disassociateTrustBundleFromDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
      <xs:element name="trustBundleId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociateTrustBundleFromDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getTrustBundleByName">
    <xs:sequence>
      <xs:element name="bundleName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getTrustBundleByNameResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:trustBundle" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setAnchorStatusForOwner">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setAnchorStatusForOwnerResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="associateTrustBundleToDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
      <xs:element name="trustBundleId" type="xs:long"/>
      <xs:element name="incoming" type="xs:boolean"/>
      <xs:element name="outgoing" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="associateTrustBundleToDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="setCertificateStatus">
    <xs:sequence>
      <xs:element name="certificateIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="setCertificateStatusResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="updateDomain">
    <xs:sequence>
      <xs:element ref="tns:domain" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="addDNS">
    <xs:sequence>
      <xs:element name="records" type="tns:dnsRecord" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addDNSResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="disassociatePolicyGroupFromDomains">
    <xs:sequence>
      <xs:element name="policyGroupId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociatePolicyGroupFromDomainsResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getCertificates">
    <xs:sequence>
      <xs:element name="certificateIds" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getCertificatesResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certificate" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getIncomingAnchors">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getIncomingAnchorsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:anchor" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDNSByType">
    <xs:sequence>
      <xs:element name="type" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDNSByTypeResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:dnsRecord" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addPolicyUseToGroup">
    <xs:sequence>
      <xs:element name="policyGroupId" type="xs:long"/>
      <xs:element name="policyId" type="xs:long"/>
      <xs:element name="policyUse" type="tns:certPolicyUse" minOccurs="0"/>
      <xs:element name="incoming" type="xs:boolean"/>
      <xs:element name="outgoing" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addPolicyUseToGroupResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removeAddress">
    <xs:sequence>
      <xs:element name="emailAddress" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeAddressResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removeDomain">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getDNSByRecordIds">
    <xs:sequence>
      <xs:element name="recordIds" type="xs:long" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDNSByRecordIdsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:dnsRecord" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDomain">
    <xs:sequence>
      <xs:element name="id" type="xs:long" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getDomainResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:domain" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAnchorsForOwner">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAnchorsForOwnerResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:anchor" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updatePolicyAttributes">
    <xs:sequence>
      <xs:element name="policyId" type="xs:long"/>
      <xs:element name="policyName" type="xs:string" minOccurs="0"/>
      <xs:element name="policyLexicon" type="tns:policyLexicon" minOccurs="0"/>
      <xs:element name="policyData" type="xs:base64Binary" nillable="true" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updatePolicyAttributesResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="addPolicyGroup">
    <xs:sequence>
      <xs:element name="policyGroup" type="tns:certPolicyGroup" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addPolicyGroupResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="addDomain">
    <xs:sequence>
      <xs:element ref="tns:domain" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="listCertificates">
    <xs:sequence>
      <xs:element name="lastCertificateId" type="xs:long"/>
      <xs:element name="maxResutls" type="xs:int"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="listCertificatesResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certificate" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociateTrustBundlesFromDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociateTrustBundlesFromDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removeDNSByRecordId">
    <xs:sequence>
      <xs:element name="recordId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeDNSByRecordIdResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="updateGroupAttributes">
    <xs:sequence>
      <xs:element name="policyGroupId" type="xs:long"/>
      <xs:element name="policyGroupName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateGroupAttributesResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupsByDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupsByDomainResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicyGroupDomainReltn" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certPolicyGroupDomainReltn">
    <xs:sequence>
      <xs:element name="certPolicyGroup" type="tns:certPolicyGroup" minOccurs="0"/>
      <xs:element ref="tns:domain" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getTrustBundles">
    <xs:sequence>
      <xs:element name="fetchAnchors" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getTrustBundlesResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:trustBundle" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getTrustBundlesByDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
      <xs:element name="fetchAnchors" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getTrustBundlesByDomainResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:trustBundleDomainReltn" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="trustBundleDomainReltn">
    <xs:sequence>
      <xs:element ref="tns:domain" minOccurs="0"/>
      <xs:element name="id" type="xs:long"/>
      <xs:element name="incoming" type="xs:boolean"/>
      <xs:element name="outgoing" type="xs:boolean"/>
      <xs:element name="trustBundle" type="tns:trustBundle" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAnchors">
    <xs:sequence>
      <xs:element name="anchorId" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAnchorsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:anchor" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateDNS">
    <xs:sequence>
      <xs:element name="recordId" type="xs:long"/>
      <xs:element name="record" type="tns:dnsRecord" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateDNSResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getOutgoingAnchors">
    <xs:sequence>
      <xs:element name="owner" type="xs:string" minOccurs="0"/>
      <xs:element name="options" type="tns:certificateGetOptions" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getOutgoingAnchorsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:anchor" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAddresss">
    <xs:sequence>
      <xs:element name="emailAddress" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="status" type="tns:entityStatus" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getAddresssResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:address" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="listAddresss">
    <xs:sequence>
      <xs:element name="lastEmailAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="maxResults" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="listAddresssResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:address" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeAnchors">
    <xs:sequence>
      <xs:element name="anchorId" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeAnchorsResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyById">
    <xs:sequence>
      <xs:element name="policyId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPolicyByIdResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicy" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeDNS">
    <xs:sequence>
      <xs:element name="records" type="tns:dnsRecord" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removeDNSResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="removePolicyUseFromGroup">
    <xs:sequence>
      <xs:element name="policyGroupReltnId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="removePolicyUseFromGroupResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="addPolicy">
    <xs:sequence>
      <xs:element name="policy" type="tns:certPolicy" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addPolicyResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="refreshTrustBundle">
    <xs:sequence>
      <xs:element name="id" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="refreshTrustBundleResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getDomainCount">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getDomainCountResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:int"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addTrustBundle">
    <xs:sequence>
      <xs:element name="bundle" type="tns:trustBundle" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addTrustBundleResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupByName">
    <xs:sequence>
      <xs:element name="policyGroupName" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupByNameResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicyGroup" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateSetting">
    <xs:sequence>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="value" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="updateSettingResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="contains">
    <xs:sequence>
      <xs:element name="cert" type="tns:certificate" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="containsResponse">
    <xs:sequence>
      <xs:element name="return" type="xs:boolean"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociateTrustBundleFromDomains">
    <xs:sequence>
      <xs:element name="trustBundleId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="disassociateTrustBundleFromDomainsResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="addAnchor">
    <xs:sequence>
      <xs:element name="anchor" type="tns:anchor" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addAnchorResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="associatePolicyGroupToDomain">
    <xs:sequence>
      <xs:element name="domainId" type="xs:long"/>
      <xs:element name="policyGroupId" type="xs:long"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="associatePolicyGroupToDomainResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyGroups">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicyGroup" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addCertificates">
    <xs:sequence>
      <xs:element name="certs" type="tns:certificate" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="addCertificatesResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupDomainReltns">
    <xs:sequence/>
  </xs:complexType>
  <xs:complexType name="getPolicyGroupDomainReltnsResponse">
    <xs:sequence>
      <xs:element name="return" type="tns:certPolicyGroupDomainReltn" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="deletePolicies">
    <xs:sequence>
      <xs:element name="policyIds" type="xs:long" nillable="true" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="deletePoliciesResponse">
    <xs:sequence/>
  </xs:complexType>
  <xs:simpleType name="entityStatus">
    <xs:restriction base="xs:string">
      <xs:enumeration value="NEW"/>
      <xs:enumeration value="ENABLED"/>
      <xs:enumeration value="DISABLED"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="policyLexicon">
    <xs:restriction base="xs:string">
      <xs:enumeration value="XML"/>
      <xs:enumeration value="JAVA_SER"/>
      <xs:enumeration value="SIMPLE_TEXT_V1"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="bundleRefreshError">
    <xs:restriction base="xs:string">
      <xs:enumeration value="SUCCESS"/>
      <xs:enumeration value="NOT_FOUND"/>
      <xs:enumeration value="DOWNLOAD_TIMEOUT"/>
      <xs:enumeration value="INVALID_BUNDLE_FORMAT"/>
      <xs:enumeration value="INVALID_SIGNING_CERT"/>
      <xs:enumeration value="UNMATCHED_SIGNATURE"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="certPolicyUse">
    <xs:restriction base="xs:string">
      <xs:enumeration value="TRUST"/>
      <xs:enumeration value="PRIVATE_RESOLVER"/>
      <xs:enumeration value="PUBLIC_RESOLVER"/>
      <xs:enumeration value="VALIDATION"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8080/CONNECTDirectConfig/ConfigurationService</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:AddAddress" name="addAddress" bindingOperationName="addAddress" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddAnchor" name="addAnchor" bindingOperationName="addAnchor" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddCertificates" name="addCertificates" bindingOperationName="addCertificates" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddDNS" name="addDNS" bindingOperationName="addDNS" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddDomain" name="addDomain" bindingOperationName="addDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddPolicy" name="addPolicy" bindingOperationName="addPolicy" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddPolicyGroup" name="addPolicyGroup" bindingOperationName="addPolicyGroup" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddPolicyUseToGroup" name="addPolicyUseToGroup" bindingOperationName="addPolicyUseToGroup" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddSetting" name="addSetting" bindingOperationName="addSetting" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AddTrustBundle" name="addTrustBundle" bindingOperationName="addTrustBundle" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AssociatePolicyGroupToDomain" name="associatePolicyGroupToDomain" bindingOperationName="associatePolicyGroupToDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:AssociateTrustBundleToDomain" name="associateTrustBundleToDomain" bindingOperationName="associateTrustBundleToDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:Contains" name="contains" bindingOperationName="contains" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DeletePolicies" name="deletePolicies" bindingOperationName="deletePolicies" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DeletePolicyGroups" name="deletePolicyGroups" bindingOperationName="deletePolicyGroups" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DeleteSetting" name="deleteSetting" bindingOperationName="deleteSetting" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DeleteTrustBundles" name="deleteTrustBundles" bindingOperationName="deleteTrustBundles" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DisassociatePolicyGroupFromDomain" name="disassociatePolicyGroupFromDomain" bindingOperationName="disassociatePolicyGroupFromDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DisassociatePolicyGroupFromDomains" name="disassociatePolicyGroupFromDomains" bindingOperationName="disassociatePolicyGroupFromDomains" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DisassociatePolicyGroupsFromDomain" name="disassociatePolicyGroupsFromDomain" bindingOperationName="disassociatePolicyGroupsFromDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DisassociateTrustBundleFromDomain" name="disassociateTrustBundleFromDomain" bindingOperationName="disassociateTrustBundleFromDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DisassociateTrustBundleFromDomains" name="disassociateTrustBundleFromDomains" bindingOperationName="disassociateTrustBundleFromDomains" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:DisassociateTrustBundlesFromDomain" name="disassociateTrustBundlesFromDomain" bindingOperationName="disassociateTrustBundlesFromDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAddressCount" name="getAddressCount" bindingOperationName="getAddressCount" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAddresss" name="getAddresss" bindingOperationName="getAddresss" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAllSettings" name="getAllSettings" bindingOperationName="getAllSettings" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAnchor" name="getAnchor" bindingOperationName="getAnchor" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAnchors" name="getAnchors" bindingOperationName="getAnchors" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetAnchorsForOwner" name="getAnchorsForOwner" bindingOperationName="getAnchorsForOwner" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetCertificate" name="getCertificate" bindingOperationName="getCertificate" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetCertificates" name="getCertificates" bindingOperationName="getCertificates" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetCertificatesForOwner" name="getCertificatesForOwner" bindingOperationName="getCertificatesForOwner" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDNSByName" name="getDNSByName" bindingOperationName="getDNSByName" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDNSByNameAndType" name="getDNSByNameAndType" bindingOperationName="getDNSByNameAndType" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDNSByRecordId" name="getDNSByRecordId" bindingOperationName="getDNSByRecordId" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDNSByRecordIds" name="getDNSByRecordIds" bindingOperationName="getDNSByRecordIds" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDNSByType" name="getDNSByType" bindingOperationName="getDNSByType" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDNSCount" name="getDNSCount" bindingOperationName="getDNSCount" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDomain" name="getDomain" bindingOperationName="getDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDomainCount" name="getDomainCount" bindingOperationName="getDomainCount" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetDomains" name="getDomains" bindingOperationName="getDomains" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetIncomingAnchors" name="getIncomingAnchors" bindingOperationName="getIncomingAnchors" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetOutgoingAnchors" name="getOutgoingAnchors" bindingOperationName="getOutgoingAnchors" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicies" name="getPolicies" bindingOperationName="getPolicies" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicyById" name="getPolicyById" bindingOperationName="getPolicyById" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicyByName" name="getPolicyByName" bindingOperationName="getPolicyByName" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicyGroupById" name="getPolicyGroupById" bindingOperationName="getPolicyGroupById" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicyGroupByName" name="getPolicyGroupByName" bindingOperationName="getPolicyGroupByName" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicyGroupDomainReltns" name="getPolicyGroupDomainReltns" bindingOperationName="getPolicyGroupDomainReltns" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicyGroups" name="getPolicyGroups" bindingOperationName="getPolicyGroups" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetPolicyGroupsByDomain" name="getPolicyGroupsByDomain" bindingOperationName="getPolicyGroupsByDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetSettingByName" name="getSettingByName" bindingOperationName="getSettingByName" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetSettingsByNames" name="getSettingsByNames" bindingOperationName="getSettingsByNames" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetTrustBundleById" name="getTrustBundleById" bindingOperationName="getTrustBundleById" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetTrustBundleByName" name="getTrustBundleByName" bindingOperationName="getTrustBundleByName" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetTrustBundles" name="getTrustBundles" bindingOperationName="getTrustBundles" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:GetTrustBundlesByDomain" name="getTrustBundlesByDomain" bindingOperationName="getTrustBundlesByDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:ListAddresss" name="listAddresss" bindingOperationName="listAddresss" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:ListAnchors" name="listAnchors" bindingOperationName="listAnchors" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:ListCertificates" name="listCertificates" bindingOperationName="listCertificates" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:listDomains" name="listDomains" bindingOperationName="listDomains" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RefreshTrustBundle" name="refreshTrustBundle" bindingOperationName="refreshTrustBundle" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveAddress" name="removeAddress" bindingOperationName="removeAddress" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveAnchors" name="removeAnchors" bindingOperationName="removeAnchors" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveAnchorsForOwner" name="removeAnchorsForOwner" bindingOperationName="removeAnchorsForOwner" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveCertificates" name="removeCertificates" bindingOperationName="removeCertificates" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveCertificatesForOwner" name="removeCertificatesForOwner" bindingOperationName="removeCertificatesForOwner" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveDNS" name="removeDNS" bindingOperationName="removeDNS" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveDNSByRecordId" name="removeDNSByRecordId" bindingOperationName="removeDNSByRecordId" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveDNSByRecordIds" name="removeDNSByRecordIds" bindingOperationName="removeDNSByRecordIds" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveDomain" name="removeDomain" bindingOperationName="removeDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemoveDomainById" name="removeDomainById" bindingOperationName="removeDomainById" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:RemovePolicyUseFromGroup" name="removePolicyUseFromGroup" bindingOperationName="removePolicyUseFromGroup" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:SearchDomain" name="searchDomain" bindingOperationName="searchDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:SetAnchorStatusForOwner" name="setAnchorStatusForOwner" bindingOperationName="setAnchorStatusForOwner" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:SetCertificateStatus" name="setCertificateStatus" bindingOperationName="setCertificateStatus" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:SetCertificateStatusForOwner" name="setCertificateStatusForOwner" bindingOperationName="setCertificateStatusForOwner" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateAddress" name="updateAddress" bindingOperationName="updateAddress" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateDNS" name="updateDNS" bindingOperationName="updateDNS" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateDomain" name="updateDomain" bindingOperationName="updateDomain" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateGroupAttributes" name="updateGroupAttributes" bindingOperationName="updateGroupAttributes" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateLastUpdateError" name="updateLastUpdateError" bindingOperationName="updateLastUpdateError" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdatePolicyAttributes" name="updatePolicyAttributes" bindingOperationName="updatePolicyAttributes" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateSetting" name="updateSetting" bindingOperationName="updateSetting" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateTrustBundleAttributes" name="updateTrustBundleAttributes" bindingOperationName="updateTrustBundleAttributes" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation><con:operation isOneWay="false" action="urn:UpdateTrustBundleSigningCertificate" name="updateTrustBundleSigningCertificate" bindingOperationName="updateTrustBundleSigningCertificate" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false"><con:settings/></con:operation></con:interface><con:testSuite name="AutomatedDirectTestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingWSAnchorsInvalidDomain" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Clear Local Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'WS Anchors Test (invalid email domain) - Case 1',context.findProperty('MailFrom'), 'invalidemail@invaliddomain.org', context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),context.findProperty('Notify'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>100000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>context.withSql('eventdb') {sql ->
		assert 0 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2015-02-19T23:04:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2015-02-19T23:14:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/19/2015 23:04:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-03-21T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingWSAnchorsInvalidUser" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Clear Local Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'WS Anchors Test (invalid email username) - Case 2',context.findProperty('MailFrom'), 'invalidemail@direct.connectopensource.net', context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),context.findProperty('Notify'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>100000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>context.withSql('eventdb') {sql ->
		assert 7 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_FAILED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_FAILED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_FAILED"')[0]
}</script></con:config></con:testStep><con:testStep type="groovy" name="Assert Remote Event Table Rows" disabled="true"><con:settings/><con:config><script>context.withSql_remote('eventdb') {sql_remote ->
		assert 6 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
}</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2015-02-19T23:04:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2015-02-19T23:14:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/19/2015 23:04:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-03-21T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingWSAnchors" searchProperties="true" id="08e0b12c-46c6-46c6-a0cd-de239665cd2d"><con:settings/><con:testStep type="groovy" name="Clear Local Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'WS Anchors Test - Case 4',context.findProperty('MailFrom'), context.findProperty('MailTo'), context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),context.findProperty('Notify'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>100000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>if (context.findProperty('Notify')=='yes') {

	context.withSql('eventdb') {sql ->
		assert 7 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_SUCCESSFUL"')[0]
	}
	
} else {

	context.withSql('eventdb') {sql ->
		assert 5 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_SUCCESSFUL"')[0]
	}

}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert Remote Event Table Rows"><con:settings/><con:config><script>if (context.findProperty('Notify')=='yes') {

	context.withSql_remote('eventdb') {sql_remote ->
		assert 6 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
	}
	
} else {

	context.withSql_remote('eventdb') {sql_remote ->
		assert 4 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
	}

}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2015-02-19T23:04:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2015-02-19T23:14:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/19/2015 23:04:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-03-21T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingWSAnchorsNotificationOff" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Clear Local Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'WS Anchors Test (no notification) - Case 3',context.findProperty('MailFrom'), context.findProperty('MailTo'), context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),'no');
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>100000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>context.withSql('eventdb') {sql ->
		assert 5 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_SUCCESSFUL"')[0]
}</script></con:config></con:testStep><con:testStep type="groovy" name="Assert Remote Event Table Rows"><con:settings/><con:config><script>context.withSql_remote('eventdb') {sql_remote ->
		assert 4 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
}</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2015-02-19T23:04:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2015-02-19T23:14:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/19/2015 23:04:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-03-21T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingWSAnchorsDispatchedTimeout" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Set Dispatched and Processed Timeouts"><con:settings/><con:config><script>nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ProcessedMessageReceiveTimeLimit", "500000", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "DispatchedMessageReceiveTimeLimit", "1", log);</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Local Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'WS Anchors Test - Case 5',context.findProperty('MailFrom'), context.findProperty('MailTo'), context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),context.findProperty('Notify'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>80000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>context.withSql('eventdb') {sql ->
		assert 5 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_FAILED"')[0]
}</script></con:config></con:testStep><con:testStep type="groovy" name="Restore Dispatched and Processed Timeouts"><con:settings/><con:config><script>nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "ProcessedMessageReceiveTimeLimit", "3600000", log);
nhinc.FileUtils.updateProperty(context.findProperty('GatewayPropDir'), "gateway.properties", "DispatchedMessageReceiveTimeLimit", "86400000", log);</script></con:config></con:testStep><con:tearDownScript/><con:properties><con:property><con:name>startDate</con:name><con:value>2015-02-19T23:04:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2015-02-19T23:14:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/19/2015 23:04:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-03-21T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingWSAnchorsProcessedTimeout" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Set Dispatched and Processed Timeouts"><con:settings/><con:config><script>nhinc.FileUtils.updateProperty(context.findProperty('RemoteGatewayPropDir'), "gateway.properties", "ProcessedMessageReceiveTimeLimit", "40000", log);
nhinc.FileUtils.updateProperty(context.findProperty('RemoteGatewayPropDir'), "gateway.properties", "DispatchedMessageReceiveTimeLimit", "500000", log);</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Local Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'WS Anchors Test - Case 6',context.findProperty('MailFrom'), context.findProperty('MailTo'), context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),context.findProperty('Notify'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>100000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>context.withSql('eventdb') {sql ->
		assert 7 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_FAILED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_DISPATCHED"')[0]
}</script></con:config></con:testStep><con:tearDownScript>nhinc.FileUtils.updateProperty(context.findProperty('RemoteGatewayPropDir'), "gateway.properties", "ProcessedMessageReceiveTimeLimit", "3600000", log);
nhinc.FileUtils.updateProperty(context.findProperty('RemoteGatewayPropDir'), "gateway.properties", "DispatchedMessageReceiveTimeLimit", "86400000", log);</con:tearDownScript><con:properties><con:property><con:name>startDate</con:name><con:value>2015-02-19T23:04:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2015-02-19T23:14:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/19/2015 23:04:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-03-21T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingWSAnchorsNoTrust" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Clear Local Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table" disabled="true"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Remove Sender Anchor From Remote Trust Store"><con:settings/><con:config><script>// This will eventually be used to invoke ssh scripts to invoke scripts on slave

// def listOfFiles = "D:/CONNECT/Product/SoapUI_Test/RegressionSuite/Direct/AutomatedDirectOutboundTesting/startserver.bat".execute().text

context.withSql_remote(context.findProperty('EventDB')) { sql_remote -> 
			sql_remote.execute('delete from configdb.anchor'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'WS Anchors Test - Case 8',context.findProperty('MailFrom'), context.findProperty('MailTo'), context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),context.findProperty('Notify'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>100000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>context.withSql('eventdb') {sql ->
		assert 3 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_FAILED"')[0]
	}</script></con:config></con:testStep><con:testStep type="groovy" name="Assert Remote Event Table Rows" disabled="true"><con:settings/><con:config><script>if (context.findProperty('Notify')=='yes') {

	context.withSql_remote('eventdb') {sql_remote ->
		assert 6 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
	}
	
} else {

	context.withSql_remote('eventdb') {sql_remote ->
		assert 4 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
	}

}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2015-02-19T23:04:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2015-02-19T23:14:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/19/2015 23:04:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-03-21T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingTrustBundles" searchProperties="true" id="cc66aaea-e866-4e46-86bf-f1e63ca138de" disabled="true"><con:settings/><con:testStep type="groovy" name="Clear Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Remote Event Table"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="groovy" name="Set up Trust Bundles"><con:settings/><con:config><script>context.withSql { sql -> 
			sql.execute('source /PATH/PopulateTrustBundles.sql ')
			}</script></con:config></con:testStep><con:testStep type="delay" name="Wait for configdb to update"><con:settings/><con:config><delay>50000</delay></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps(context.findProperty('MailContent'),'Trust Bundles Test - Case 3',context.findProperty('MailFrom'), context.findProperty('MailTo'), context.findProperty('MailServerIP'), context.findProperty('MailServerPort'),context.findProperty('MailUserid'),context.findProperty('MailPass'),context.findProperty('Notify'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>100000</delay></con:config></con:testStep><con:testStep type="groovy" name="Assert Local Event Table Rows"><con:settings/><con:config><script>if (context.findProperty('Notify')=='yes') {

	context.withSql('eventdb') {sql ->
		assert 7 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_SUCCESSFUL"')[0]
	}
	
} else {

	context.withSql('eventdb') {sql ->
		assert 5 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_SUCCESSFUL"')[0]
	}

}
</script></con:config></con:testStep><con:testStep type="groovy" name="Assert Remote Event Table Rows"><con:settings/><con:config><script>if (context.findProperty('Notify')=='yes') {

	context.withSql_remote('eventdb') {sql_remote ->
		assert 6 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_DISPATCHED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
	}
	
} else {

	context.withSql_remote('eventdb') {sql_remote ->
		assert 4 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_DIRECT"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_MDN_PROCESSED"')[0]
		assert 1 == sql_remote.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_DIRECT"')[0]
	}

}
</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2014-12-12T21:28:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2014-12-12T21:38:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>12/12/2014 21:28:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-01-11T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SendDirectMessageUsingKeystoreAnchors" searchProperties="true" id="fc64836a-683f-4469-b79e-b86d2d2328a7" disabled="true"><con:settings/><con:testStep type="request" name="ChangeAnchorStoreTypeToWS"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ConfigurationServiceImplPortBinding</con:interface><con:operation>addSetting</con:operation><con:request name="ChangeAnchorStoreTypeToWS"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTDirectConfig/ConfigurationService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:con="http://nhind.org/config">
   <soapenv:Header/>
   <soapenv:Body>
      <con:addSetting>
         <name>AnchorStoreType</name>
         <value>WS</value>
      </con:addSetting>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Set Incoming Outgoing Traffic Value"><con:settings/><con:config><script>testRunner.testCase.testSuite.project.setPropertyValue( "IncomingTraffic", "0") ;
testRunner.testCase.testSuite.project.setPropertyValue( "OutgoingTraffic", "0") ;
</script></con:config></con:testStep><con:testStep type="groovy" name="Clear Event Table"><con:settings/><con:config><script>context.withSql(context.findProperty('EventDB')) { sql -> 
			sql.execute('delete from '+context.findProperty('EventTable'))
			}</script></con:config></con:testStep><con:testStep type="request" name="DisassociateTrustBundleFromDomain"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ConfigurationServiceImplPortBinding</con:interface><con:operation>disassociateTrustBundleFromDomain</con:operation><con:request name="DisassociateTrustBundleFromDomain"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTDirectConfig/ConfigurationService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:con="http://nhind.org/config">
   <soapenv:Header/>
   <soapenv:Body>
      <con:disassociateTrustBundleFromDomain>
         <domainId>${#Project#DomainId}</domainId>
         <trustBundleId>${#Project#TrustBundleID}</trustBundleId>
      </con:disassociateTrustBundleFromDomain>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="AddAnchors"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ConfigurationServiceImplPortBinding</con:interface><con:operation>addAnchor</con:operation><con:request name="AddAnchors"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/CONNECTDirectConfig/ConfigurationService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:con="http://nhind.org/config">
   <soapenv:Header/>
   <soapenv:Body>
      <con:addAnchor>
         <anchor>
            <certificateId>1</certificateId>
            <data>MIIDazCCAtSgAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJVUzERMA8GA1UECBMIVmlyZ2luaWExEDAOBgNVBAcTB0ZhaXJmYXgxEDAOBgNVBAoTB0NPTk5FQ1QxKTAnBgNVBAMTIERpcmVjdCBDb25uZWN0b3BlbnNvdXJjZSBSb290IENBMB4XDTEzMTIwNTAwNDAzMVoXDTIzMTIwMzAwNDAzMVowgYYxCzAJBgNVBAYTAlVTMREwDwYDVQQIDAhWaXJnaW5pYTEQMA4GA1UECgwHQ09OTkVDVDElMCMGA1UEAwwcZGlyZWN0LmNvbm5lY3RvcGVuc291cmNlLm9yZzErMCkGCSqGSIb3DQEJARYcZGlyZWN0LmNvbm5lY3RvcGVuc291cmNlLm9yZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN1bojWSDyXnkZuTCCXhO5LP2SgKMlm8IIafrOQ1D/HTLH4OshtoB0Ugq286ayK7Wkc9xM6lwdd2VElZ8nwEk0HU1tvV4oIgtplN2st1oRA4BymI674i1L/3xsqTALcut+9v+0wo5Z2M20wXEpXqfjYQZVgscqWXc3/8f2ETDBAbMtpJblAovFcAkOEWW4PJzlLAaPCMyQIpv9au0cwoCP6kEXR83kLGg4m45stGCEdQh+H+nLaazrvtechb7+Kh9S0g4BBCGLwXTgd81O+Z73ZMKB5PpeEdf+LuOY43vJumLr9MguatcqaWvQtYO/dHzUy52hHEQApgZlQRHbGM+XMCAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgBhvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYEFHWUUv4NNyDf8oJ5Rc8S/nd5Lm9yMB8GA1UdIwQYMBaAFK1tIb8XcV1JKf/QtMAGKoZucq/UMA0GCSqGSIb3DQEBBQUAA4GBAHJyszQ8Bk5TkBvHpia8O26lnoL9e3wQutt2wltmgczw+MEDQbRAms+oSXQNdywYRpePeZJBhk2vGDsKcQeASm6lxpiMXqgaJvBFLMuWuGdDS5vCyChcp/C2TIJWfq/HPHjv94OnVWU03PdRVCsG6DMtec4fuJ6kupRu29fewLIS</data>
            <incoming>1</incoming>
            <outgoing>1</outgoing>
            <owner>direct.connectopensource.org</owner>
            <status>ENABLED</status>
         </anchor>
         <anchor>
            <certificateId>2</certificateId>
            <data>MIIBzjCCATegAwIBAgIIdHvEwD63/8QwDQYJKoZIhvcNAQEFBQAwHzEdMBsGA1UEAwwUZGlyZWN0LnNpdGVudi5vcmdfY2EwHhcNMTMwNzA1MTgzOTI2WhcNMjExMTI1MTkzOTI2WjAfMR0wGwYDVQQDDBRkaXJlY3Quc2l0ZW52Lm9yZ19jYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAjGSYUkyiDOMMYzxTwq4QjtMEiyAvZFToGEN9FT8l53eNS2yOgPa3kpBbzbXv5UiEoE8kutjJ+E7xyBgn+asdW2agOa3KYwPgbrffe5cay5hqkbwRKPud22CJBt0WAJUCY9weYBsDAWRdl/I6vda+cMBT6z5J7ms5+vtYwaRpKwMCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOBgQCBvIxK5DX+W+0Ve9XibSffa95yLwFb5f0oB59WQ9l/gOnA6DD/TD4j3L51PdY4QAkXaWEvE+mMeIrQ4TGE84uhCn5e5yhbepVXBvJRloQEd/QIqwLxqMGeT7ac/jAgQ/aoexJmlo/pkkFuNvdPiypd97PM8FhSBt7EUZnZqUb7mw==</data>
            <incoming>1</incoming>
            <outgoing>1</outgoing>
            <owner>direct.connectopensource.org</owner>
            <status>ENABLED</status>
         </anchor>
         <anchor>
            <certificateId>3</certificateId>
            <data>MIIDczCCAlugAwIBAgIIP1IH+Wz1SawwDQYJKoZIhvcNAQEFBQAwbzEvMC0GA1UEAwwmZGlyZWN0cmkuY29ubmVjdG9wZW5zb3VyY2Uub3JnIFJvb3QgQ0ExCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJWQTEQMA4GA1UEBwwHRmFpcmZheDEQMA4GA1UECgwHQ09OTkVDVDAeFw0xNDAyMjUxNTAzNTJaFw0yNDAyMjMxNTAzNTJaMG8xLzAtBgNVBAMMJmRpcmVjdHJpLmNvbm5lY3RvcGVuc291cmNlLm9yZyBSb290IENBMQswCQYDVQQGEwJVUzELMAkGA1UECAwCVkExEDAOBgNVBAcMB0ZhaXJmYXgxEDAOBgNVBAoMB0NPTk5FQ1QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDI6EG3c09wPR1avdt2is6/zUWgnuq+IcFrUm1Yi2O8SVCHsgtDZWOw+VocUAZe3qmtdbGvsMa5dMtyl6jL0LQDOw9gSPNIIHbHgkRURjRaJJrLsxGc8/9P9I8l0aI7O/qEe3E3z2ev4v5tChKFy8M2ai/dmFKgOFbgip97J+8qtiEQchssLbOseL8wFjE8manA35TEpokHLZdjAMT57JqQTvz3WKM0i2qnmPjljrP2F7cVtOa8gelZV79uEh0rIj2Wneb2PtkZ9ceblqczz+Tgno31xxQywisapucdzl1lEHcFiHpZCjJlAHR7EZHcRIbPkcPrlltT37iSpDeT2GPfAgMBAAGjEzARMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAAQHK/h86XYdloEuYOOvpPj53C6Z9hb5MNT4M2mHVnlvBwSxiydaUdzO7+riOLZzhVsKpTJn3/tS5vgTYBglHMo3n6KIH0/oMsIrhPsPfVomQALdHLe06mdjAHNUzsuIwmWRvwGxoFthjRwEwC3uannbOBC3uK5dXGzg6HfkMlZnD/OmBk654AShjQHEZjWpuDnI3/wSpgn78Eu8MDcrO3UC59DCirrANPa5klgrm8RzKKUw2G/Es6QgpemT0nSATitPhFt3szOfecwKVG/bv44p3odGD6oyj4CHtTfclLv7cVsrtMTyPryvA9I8m9kFMJiY2INTegXNtQrvKUf82Zk=</data>
            <incoming>1</incoming>
            <outgoing>1</outgoing>
            <owner>direct.connectopensource.org</owner>
            <status>ENABLED</status>
         </anchor>
      </con:addAnchor>
   </soapenv:Body>
</soapenv:Envelope>
]]></con:request><con:assertion type="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="SendEmail"><con:settings/><con:config><script>context.sendEmailSmtps("Content","Sending smtp messagae using anchors in database","alamelu@direct.connectopensource.org", "provider1@direct.sitenv.org", "54.85.35.69", "587","direct",context.findProperty('password'));
</script></con:config></con:testStep><con:testStep type="delay" name="Delay"><con:settings/><con:config><delay>40000</delay></con:config></con:testStep><con:testStep type="manualTestStep" name="Check Dispatched and Processed MDNs"><con:description>Verify the email account to see if you got the Dispatched MDN.</con:description><con:settings/><con:config xsi:type="con:ManualTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:expectedResult>Should have received the Dispatched MDN</con:expectedResult></con:config></con:testStep><con:testStep type="groovy" name="Count Event Table Rows"><con:settings/><con:config><script>context.withSql('eventdb') {sql ->
	assert 7 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable'))[0]
	assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_OUTBOUND_DIRECT"')[0]
	assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_OUTBOUND_DIRECT"')[0]
	assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_PROCESSED"')[0]
	assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_PROCESSED"')[0]
	assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="BEGIN_INBOUND_MDN_DISPATCHED"')[0]
	assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="END_INBOUND_MDN_DISPATCHED"')[0]
	assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('EventTable') + ' where name="DIRECT_EDGE_NOTIFICATION_SUCCESSFUL"')[0]
	
}</script></con:config></con:testStep><con:properties><con:property><con:name>startDate</con:name><con:value>2014-12-12T21:55:15Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2014-12-12T22:05:15Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>12/12/2014 21:55:15</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2015-01-11T00:00:00Z</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>AnchorStorePassword</con:name><con:value>changeit</con:value></con:property><con:property><con:name>DomainID</con:name><con:value>1</con:value></con:property><con:property><con:name>GatewayPropDir</con:name><con:value>D://glassfish3//glassfish//domains//domain1//config//nhin</con:value></con:property><con:property><con:name>OutgoingTraffic</con:name><con:value>0</con:value></con:property><con:property><con:name>EventTable</con:name><con:value>event</con:value></con:property><con:property><con:name>AnchorTable</con:name><con:value>Anchor</con:value></con:property><con:property><con:name>ConfigDB</con:name><con:value>configdb</con:value></con:property><con:property><con:name>AnchorOwner</con:name><con:value>direct.connectopensource.org</con:value></con:property><con:property><con:name>IncomingTraffic</con:name><con:value>0</con:value></con:property><con:property><con:name>AnchorKeyStoreFileLocation</con:name><con:value>C://glassfish3//glassfish//domains//domain1//config</con:value></con:property><con:property><con:name>EventDB</con:name><con:value>eventdb</con:value></con:property><con:property><con:name>TrustBundleID</con:name><con:value>4</con:value></con:property></con:properties><con:afterLoadScript>def propertiesFilename = project.path[0..(project.path.size()-4)] + 'properties'
def propertiesFile = new File(propertiesFilename)
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileInputStream(propertiesFile))
	props.each { key, value ->
	    project.setPropertyValue(key, value)
	}
}

TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
afterRun: { testRunner, runContext -> },
afterStep: { testRunner, runContext, result -> },
beforeStep: { testRunner, runContext -> },
beforeStep: { testRunner, runContext, testStep -> },
beforeRun: { testRunner, runContext -> 
use (org.codehaus.groovy.runtime.TimeCategory) {
def startDate = 5.minutes.ago
def endDate = 5.minutes.from.now
def expireDate = 30.days.from.now

def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

runContext.testCase.setPropertyValue("startDate", startDate.format(df))
runContext.testCase.setPropertyValue("endDate", endDate.format(df))
runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
}
}   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)



com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
return delegate.getProperty(propertyName) ?:
delegate.testCase.getPropertyValue(propertyName) ?:
delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block ->
def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
def host = delegate.findProperty('DBHost')
def port = delegate.findProperty('DBPort')
def user = delegate.findProperty('DBUser')
def pass = delegate.findProperty('DBPass')

def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
try {
block(sql)
} finally {
sql.close()
}
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql_remote = { dbOrPropertyName, block ->
def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
def host_remote = delegate.findProperty('RemoteDBHost')
def port_remote = delegate.findProperty('RemoteDBPort')
def user_remote = delegate.findProperty('RemoteDBUser')
def pass_remote = delegate.findProperty('RemoteDBPass')

def connectString_remote = "jdbc:mysql://${host_remote}:${port_remote}/${dbName}"
def sql_remote = groovy.sql.Sql.newInstance(connectString_remote, user_remote, pass_remote, "com.mysql.jdbc.Driver");
try {
block(sql_remote)
} finally {
sql_remote.close()
}
}

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.sendEmailStarttls = { message,subject,fromAddress, toAddress, host, port, username, password  ->
  def vMessage = delegate.findProperty("message");
  def vSubject = delegate.findProperty("subject");
  def vFromAddress = delegate.findProperty("fromAddress");
  def vToAddress = delegate.findProperty("toAddress");
  def vHost = delegate.findProperty("host");
  def vPort = delegate.findProperty("port");
  
  log.info "Inside sendEmail method";

  Properties mprops = new Properties();
  mprops.put( "mail.smtp.host", host);
  mprops.put("mail.smtp.starttls.enable", "true");
  mprops.put("mail.smtp.auth", "true");
  mprops.put("mail.debug", "true");
  mprops.put("mail.store.protocol", "pop3");
  mprops.put("mail.transport.protocol", "smtps");

log.info "Inside sendEmail method 123333";
	Session session = Session.getInstance( mprops, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
          }
        });
        log.info "Inside sendEmail method 123433333 step4";
			Message msg = new MimeMessage( session );
			msg.setFrom( new InternetAddress( context.expand( fromAddress ) ) );
			msg.setRecipients( Message.RecipientType.TO, InternetAddress.parse( context.expand( toAddress ), false ) );
			msg.setSubject(context.expand( subject ) );
			msg.setText( context.expand( message ) );
			msg.setHeader( "X-Mailer", "soapUI EMail TestStep" );
			msg.setHeader( "Disposition-Notification-Options", "X-DIRECT-FINAL-DESTINATION-DELIVERY: optional, true" );
			msg.setSentDate( new Date() );

			Transport.send( msg );
			//result.setStatus( TestStepStatus.OK );

  return true;
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.sendEmailSmtp = { message,subject,fromAddress, toAddress, host, port, username, password  ->
  def vMessage = delegate.findProperty("message");
  def vSubject = delegate.findProperty("subject");
  def vFromAddress = delegate.findProperty("fromAddress");
  def vToAddress = delegate.findProperty("toAddress");
  def vHost = delegate.findProperty("host");
  def vPort = delegate.findProperty("port");
  
  log.info "Inside sendEmail method";

  Properties mprops = new Properties();
  mprops.setProperty("mail.transport.protocol","smtp");
  mprops.setProperty("mail.host",host);
  mprops.put("mail.smtp.auth", "true");
  mprops.put("mail.debug", "true");

log.info "Inside sendEmail method 123333";
	Session session = Session.getInstance( mprops, new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
          }
        });
        log.info "Inside sendEmail method 123433333 step4";
			Message msg = new MimeMessage( session ){
				
				  protected void updateMessageID() throws MessagingException {
	                     setHeader("Message-ID", "Naresh1233232");
                      }
				};

			
			msg.setFrom( new InternetAddress( context.expand( fromAddress ) ) );
			msg.setRecipients( Message.RecipientType.TO, InternetAddress.parse( context.expand( toAddress ), false ) );
			msg.setSubject(context.expand( subject ) );
			msg.setText( context.expand( message ) );
			msg.setHeader( "X-Mailer", "soapUI EMail TestStep" );
			msg.setHeader("message-id", "naresh1234567");
			msg.setHeader( "Disposition-Notification-Options", "X-DIRECT-FINAL-DESTINATION-DELIVERY: optional, true" );
			msg.setSentDate( new Date() );

			Transport.send( msg );
			//result.setStatus( TestStepStatus.OK );

  return true;
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.sendEmailSmtps = { message,subject,fromAddress, toAddress, host, port, username, password, notify  ->
  def vMessage = delegate.findProperty("message");
  def vSubject = delegate.findProperty("subject");
  def vFromAddress = delegate.findProperty("fromAddress");
  def vToAddress = delegate.findProperty("toAddress");
  def vHost = delegate.findProperty("host");
  def vPort = delegate.findProperty("port");
  
  log.info "Inside sendEmail method";

  Properties mprops = new Properties();
    //mprops.put("mail.smtp.protocol", "smtp");
    //mprops.put("mail.smtp.starttls.enable", "true");
    mprops.put("mail.smtp.host", host);
    mprops.put("mail.smtp.port", "587");
    mprops.put("mail.smtp.starttls.enable","false");
    mprops.put("mail.smtp.auth", "true");
    //mprops.put("mail.smtp.socketFactory.port", "587");
    //mprops.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
    //mprops.put("mail.smtp.socketFactory.fallback", "false");

log.info "Inside sendEmail method 123333";
	Session session = Session.getInstance( mprops, new javax.mail.Authenticator() {
           protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
          }
        });
        log.info "Inside sendEmail method 123433333 step4";
			Message msg = new MimeMessage( session );
			msg.setFrom( new InternetAddress( context.expand( fromAddress ) ) );
			msg.setRecipients( Message.RecipientType.TO, InternetAddress.parse( context.expand( toAddress ), false ) );
			msg.setSubject(context.expand( subject ) );
			msg.setText( context.expand( message ) );
			msg.setHeader( "X-Mailer", "soapUI EMail TestStep" );
			if (notify=='yes'){
				msg.setHeader( "Disposition-Notification-Options", "X-DIRECT-FINAL-DESTINATION-DELIVERY=optional, true" );
			}
			msg.setSentDate( new Date() );

			Transport.send( msg );
			//result.setStatus( TestStepStatus.OK );

  return true;
}</con:afterLoadScript><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>