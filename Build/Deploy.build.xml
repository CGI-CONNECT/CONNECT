<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="Main Build" default="Deploy-Target">

  <property name="CCNetBuildCondition" value="ForceBuild" overwrite="false"/>
  <property name="CCNetIntegrationStatus" value="Success" overwrite="false"/>
  <property name="CCNetLastIntegrationStatus" value="Success" overwrite="false"/>
  <property name="CCNetBuildDate" value="2005-01-01" overwrite="false"/>
  <property name="CCNetBuildTime" value="00:00:01" overwrite="false"/>
  <property name="CCNetArtifactDirectory" value="C:\Temp\CCNetArtifactDirectory" overwrite="false"/>
  <property name="CCNetWorkingDirectory" value="C:\Temp\CCNetWorkingDirectory" overwrite="false"/>
  <property name="CCNetLabel" value="Personal.1" overwrite="false"/>
  <property name="CCNetLogFilePath" value="" overwrite="false"/>

  <include buildfile="Properties.Build.xml"/>
  <property name="CCNetProject" value="${ProjectName}" overwrite="false"/>
  <property name="Compile.ConfigName" value="Debug" overwrite="false"/>

  <include buildfile="Common.Build.xml" />
  <include buildfile="${PackagesDirectory}\Ant\Ant.Target.xml" />
  <include buildfile="${PackagesDirectory}\Deployment\Deployment.Target.xml" if="${file::exists(PackagesDirectory + '\Deployment\Deployment.Target.xml')}"/>
  <include buildfile="${PackagesDirectory}\glassfish\GlassFish.Target.xml" />
  <include buildfile="${PackagesDirectory}\SourceModificationReport\SourceModificationReport.Target.xml" />

  <ifthenelse test="${file::exists(PackagesDirectory + '\Subversion\SourceControl.Credentials.xml')}">
    <then>
      <include buildfile="${PackagesDirectory}\Subversion\SourceControl.Credentials.xml" />
    </then>
    <else>
      <echo level="Warning" message="${PackagesDirectory}\Subversion\SourceControl.Credentials.xml was not found. This might be okay, if say you are running a personal build."/>
    </else>
  </ifthenelse>

  <ifthenelse test="${file::exists(BuildDirectory + '\Deploy.Credentials.xml')}">
    <then>
      <include buildfile="${BuildDirectory}\Deploy.Credentials.xml" />
    </then>
    <else>
      <echo level="Warning" message="${BuildDirectory}\Deploy.Credentials.xml was not found. This might be okay, if say you are running a personal build."/>
    </else>
  </ifthenelse>

  <target name="Deploy-Target" depends="SetUps">
    <trycatch>
      <try>
        <property name="CCNetRemotingUrl" value="tcp://${BuildServerHostName}:${BuildServerPort}/CruiseManager.rem"/>
        <property name="NightlyProjectName" value="${ProjectName}-${ProjectCodeLineName} Nightly Build"/>
        <property name="NightlyBuildArchiveFolderName" value="${ccnet::get-project-last-build-date(CCNetRemotingUrl, NightlyProjectName)}"/>

        <delete file="${InstallDirectory}\AppDeploy\NHINC.zip" if="${file::exists(InstallDirectory + '\AppDeploy\NHINC.zip')}"/>
        <delete dir="${InstallDirectory}\AppDeploy\NHINC" if="${directory::exists(InstallDirectory + '\AppDeploy\NHINC')}"/>

        <get
          dest="${InstallDirectory}\AppDeploy\NHINC.zip"
          src="http://${BuildServerHostName}/${ProjectName}-${ProjectCodeLineName}/Artifacts/${NightlyBuildArchiveFolderName}/NHINC.zip"
          verbose="true"
        />

        <get
          dest="${Common.ReportDirectory}\${ProjectName}TargetProcesss.xml"
          src="http://${BuildServerHostName}/${ProjectName}-${ProjectCodeLineName}/Artifacts/${NightlyBuildArchiveFolderName}/${ProjectName}TargetProcesss.xml"
          verbose="true"
        />

        <call target="UpdateProductDir" verbose="true" />
        <call target="GlassFish.DeployTgt" verbose="true" />

      </try>
      <finally>
        <call target="TearDowns" />
      </finally>
    </trycatch>
  </target>

  <target name="UpdateProductDir">
    <exec
     program="${Tools.psexec.Exe}"
     verbose="false"
     failonerror="false"
     resultproperty="PSExec.Result"
    >
      <arg line="/accepteula"/>
      <arg line="\\${target.server}"/>
      <arg line="-p ${DeploymentServer.Password}"/>
      <arg line="-u ${DeploymentServer.UserName}"/>
      <arg line="-w ${ProductDirectory}"/>
      <arg line="svn.exe"/>
      <arg line='cleanup'/>
      <arg line="${ProductDirectory}" />
      <arg line='--username ${SVN.Username} --password ${SVN.Password}' />
    </exec>
    <exec
      program="${Tools.psexec.Exe}"
      verbose="false"
      failonerror="false"
      resultproperty="PSExec.Result"
    >
      <arg line="/accepteula"/>
      <arg line="\\${target.server}"/>
      <arg line="-p ${DeploymentServer.Password}"/>
      <arg line="-u ${DeploymentServer.UserName}"/>
      <arg line="-w ${ProductDirectory}"/>
      <arg line="svn.exe"/>
      <arg line='update'/>
      <arg line="${ProductDirectory}" />
      <arg line="--force" />
      <arg line='--username ${SVN.Username} --password ${SVN.Password}' />
    </exec>
  </target>

  <target name="tag">
    <echo message="tag"/>
    <fileset basedir="${ProductionDirectory}" id="javafiles">
      <include name="**/*/*.java" />
    </fileset>
    <foreach item="File" property="filename" >
      <in>
        <items refid="javafiles" />
      </in>

      <do >
        <copy file="${filename}" tofile="${filename}" overwrite="true" verbose="true">
          <filterchain>
            <replacetokens>
              <token key="package" value="      package"/>
            </replacetokens>
          </filterchain>
        </copy>
      </do>

    </foreach>
  </target>

  <target name="SetUps">
    <call target="Common.SetUp" />
    <description>Begin SetUps</description>
    <call target="GlassFish.SetUp" />
    <description>End SetUps</description>
  </target>

  <target name="TearDowns">
    <description>Begin TearDowns</description>
    <call target="GlassFish.TearDown" />
    <description>End TearDowns</description>
  </target>
</project>
